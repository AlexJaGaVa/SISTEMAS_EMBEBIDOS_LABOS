
LIBRARY_SERVOMOTOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004784  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004978  08004978  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004978  08004978  00014978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004980  08004980  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004980  08004980  00014980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004984  08004984  00014984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08004994  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08004994  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001138f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002173  00000000  00000000  000313cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00033540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  00034450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020821  00000000  00000000  00035270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013163  00000000  00000000  00055a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c78d7  00000000  00000000  00068bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001304cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fa4  00000000  00000000  0013051c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080048f8 	.word	0x080048f8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080048f8 	.word	0x080048f8

080001cc <__aeabi_drsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d0:	e002      	b.n	80001d8 <__adddf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_dsub>:
 80001d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d8 <__adddf3>:
 80001d8:	b530      	push	{r4, r5, lr}
 80001da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e2:	ea94 0f05 	teq	r4, r5
 80001e6:	bf08      	it	eq
 80001e8:	ea90 0f02 	teqeq	r0, r2
 80001ec:	bf1f      	itttt	ne
 80001ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fe:	f000 80e2 	beq.w	80003c6 <__adddf3+0x1ee>
 8000202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020a:	bfb8      	it	lt
 800020c:	426d      	neglt	r5, r5
 800020e:	dd0c      	ble.n	800022a <__adddf3+0x52>
 8000210:	442c      	add	r4, r5
 8000212:	ea80 0202 	eor.w	r2, r0, r2
 8000216:	ea81 0303 	eor.w	r3, r1, r3
 800021a:	ea82 0000 	eor.w	r0, r2, r0
 800021e:	ea83 0101 	eor.w	r1, r3, r1
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	2d36      	cmp	r5, #54	; 0x36
 800022c:	bf88      	it	hi
 800022e:	bd30      	pophi	{r4, r5, pc}
 8000230:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000238:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800023c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000240:	d002      	beq.n	8000248 <__adddf3+0x70>
 8000242:	4240      	negs	r0, r0
 8000244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000248:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800024c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x84>
 8000256:	4252      	negs	r2, r2
 8000258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025c:	ea94 0f05 	teq	r4, r5
 8000260:	f000 80a7 	beq.w	80003b2 <__adddf3+0x1da>
 8000264:	f1a4 0401 	sub.w	r4, r4, #1
 8000268:	f1d5 0e20 	rsbs	lr, r5, #32
 800026c:	db0d      	blt.n	800028a <__adddf3+0xb2>
 800026e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000272:	fa22 f205 	lsr.w	r2, r2, r5
 8000276:	1880      	adds	r0, r0, r2
 8000278:	f141 0100 	adc.w	r1, r1, #0
 800027c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000280:	1880      	adds	r0, r0, r2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	4159      	adcs	r1, r3
 8000288:	e00e      	b.n	80002a8 <__adddf3+0xd0>
 800028a:	f1a5 0520 	sub.w	r5, r5, #32
 800028e:	f10e 0e20 	add.w	lr, lr, #32
 8000292:	2a01      	cmp	r2, #1
 8000294:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000298:	bf28      	it	cs
 800029a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002ac:	d507      	bpl.n	80002be <__adddf3+0xe6>
 80002ae:	f04f 0e00 	mov.w	lr, #0
 80002b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80002be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c2:	d31b      	bcc.n	80002fc <__adddf3+0x124>
 80002c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c8:	d30c      	bcc.n	80002e4 <__adddf3+0x10c>
 80002ca:	0849      	lsrs	r1, r1, #1
 80002cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d4:	f104 0401 	add.w	r4, r4, #1
 80002d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e0:	f080 809a 	bcs.w	8000418 <__adddf3+0x240>
 80002e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e8:	bf08      	it	eq
 80002ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ee:	f150 0000 	adcs.w	r0, r0, #0
 80002f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f6:	ea41 0105 	orr.w	r1, r1, r5
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000300:	4140      	adcs	r0, r0
 8000302:	eb41 0101 	adc.w	r1, r1, r1
 8000306:	3c01      	subs	r4, #1
 8000308:	bf28      	it	cs
 800030a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030e:	d2e9      	bcs.n	80002e4 <__adddf3+0x10c>
 8000310:	f091 0f00 	teq	r1, #0
 8000314:	bf04      	itt	eq
 8000316:	4601      	moveq	r1, r0
 8000318:	2000      	moveq	r0, #0
 800031a:	fab1 f381 	clz	r3, r1
 800031e:	bf08      	it	eq
 8000320:	3320      	addeq	r3, #32
 8000322:	f1a3 030b 	sub.w	r3, r3, #11
 8000326:	f1b3 0220 	subs.w	r2, r3, #32
 800032a:	da0c      	bge.n	8000346 <__adddf3+0x16e>
 800032c:	320c      	adds	r2, #12
 800032e:	dd08      	ble.n	8000342 <__adddf3+0x16a>
 8000330:	f102 0c14 	add.w	ip, r2, #20
 8000334:	f1c2 020c 	rsb	r2, r2, #12
 8000338:	fa01 f00c 	lsl.w	r0, r1, ip
 800033c:	fa21 f102 	lsr.w	r1, r1, r2
 8000340:	e00c      	b.n	800035c <__adddf3+0x184>
 8000342:	f102 0214 	add.w	r2, r2, #20
 8000346:	bfd8      	it	le
 8000348:	f1c2 0c20 	rsble	ip, r2, #32
 800034c:	fa01 f102 	lsl.w	r1, r1, r2
 8000350:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000354:	bfdc      	itt	le
 8000356:	ea41 010c 	orrle.w	r1, r1, ip
 800035a:	4090      	lslle	r0, r2
 800035c:	1ae4      	subs	r4, r4, r3
 800035e:	bfa2      	ittt	ge
 8000360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000364:	4329      	orrge	r1, r5
 8000366:	bd30      	popge	{r4, r5, pc}
 8000368:	ea6f 0404 	mvn.w	r4, r4
 800036c:	3c1f      	subs	r4, #31
 800036e:	da1c      	bge.n	80003aa <__adddf3+0x1d2>
 8000370:	340c      	adds	r4, #12
 8000372:	dc0e      	bgt.n	8000392 <__adddf3+0x1ba>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0220 	rsb	r2, r4, #32
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f302 	lsl.w	r3, r1, r2
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	fa21 f304 	lsr.w	r3, r1, r4
 800038c:	ea45 0103 	orr.w	r1, r5, r3
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	f1c4 040c 	rsb	r4, r4, #12
 8000396:	f1c4 0220 	rsb	r2, r4, #32
 800039a:	fa20 f002 	lsr.w	r0, r0, r2
 800039e:	fa01 f304 	lsl.w	r3, r1, r4
 80003a2:	ea40 0003 	orr.w	r0, r0, r3
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	fa21 f004 	lsr.w	r0, r1, r4
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f094 0f00 	teq	r4, #0
 80003b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ba:	bf06      	itte	eq
 80003bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c0:	3401      	addeq	r4, #1
 80003c2:	3d01      	subne	r5, #1
 80003c4:	e74e      	b.n	8000264 <__adddf3+0x8c>
 80003c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ca:	bf18      	it	ne
 80003cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d0:	d029      	beq.n	8000426 <__adddf3+0x24e>
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	d005      	beq.n	80003ea <__adddf3+0x212>
 80003de:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e2:	bf04      	itt	eq
 80003e4:	4619      	moveq	r1, r3
 80003e6:	4610      	moveq	r0, r2
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea91 0f03 	teq	r1, r3
 80003ee:	bf1e      	ittt	ne
 80003f0:	2100      	movne	r1, #0
 80003f2:	2000      	movne	r0, #0
 80003f4:	bd30      	popne	{r4, r5, pc}
 80003f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fa:	d105      	bne.n	8000408 <__adddf3+0x230>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	4149      	adcs	r1, r1
 8000400:	bf28      	it	cs
 8000402:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800040c:	bf3c      	itt	cc
 800040e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000412:	bd30      	popcc	{r4, r5, pc}
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000418:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800041c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf1a      	itte	ne
 800042c:	4619      	movne	r1, r3
 800042e:	4610      	movne	r0, r2
 8000430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000434:	bf1c      	itt	ne
 8000436:	460b      	movne	r3, r1
 8000438:	4602      	movne	r2, r0
 800043a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043e:	bf06      	itte	eq
 8000440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000444:	ea91 0f03 	teqeq	r1, r3
 8000448:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	bf00      	nop

08000450 <__aeabi_ui2d>:
 8000450:	f090 0f00 	teq	r0, #0
 8000454:	bf04      	itt	eq
 8000456:	2100      	moveq	r1, #0
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000460:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000464:	f04f 0500 	mov.w	r5, #0
 8000468:	f04f 0100 	mov.w	r1, #0
 800046c:	e750      	b.n	8000310 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_i2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e73e      	b.n	8000310 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_f2d>:
 8000494:	0042      	lsls	r2, r0, #1
 8000496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049a:	ea4f 0131 	mov.w	r1, r1, rrx
 800049e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a2:	bf1f      	itttt	ne
 80004a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b0:	4770      	bxne	lr
 80004b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b6:	bf08      	it	eq
 80004b8:	4770      	bxeq	lr
 80004ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004be:	bf04      	itt	eq
 80004c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d4:	e71c      	b.n	8000310 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aed8 	beq.w	80002be <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6bd      	b.n	80002be <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <__aeabi_d2uiz>:
 8000968:	004a      	lsls	r2, r1, #1
 800096a:	d211      	bcs.n	8000990 <__aeabi_d2uiz+0x28>
 800096c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000970:	d211      	bcs.n	8000996 <__aeabi_d2uiz+0x2e>
 8000972:	d50d      	bpl.n	8000990 <__aeabi_d2uiz+0x28>
 8000974:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000978:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800097c:	d40e      	bmi.n	800099c <__aeabi_d2uiz+0x34>
 800097e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000986:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	4770      	bx	lr
 8000990:	f04f 0000 	mov.w	r0, #0
 8000994:	4770      	bx	lr
 8000996:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099a:	d102      	bne.n	80009a2 <__aeabi_d2uiz+0x3a>
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	4770      	bx	lr
 80009a2:	f04f 0000 	mov.w	r0, #0
 80009a6:	4770      	bx	lr

080009a8 <__aeabi_uldivmod>:
 80009a8:	b953      	cbnz	r3, 80009c0 <__aeabi_uldivmod+0x18>
 80009aa:	b94a      	cbnz	r2, 80009c0 <__aeabi_uldivmod+0x18>
 80009ac:	2900      	cmp	r1, #0
 80009ae:	bf08      	it	eq
 80009b0:	2800      	cmpeq	r0, #0
 80009b2:	bf1c      	itt	ne
 80009b4:	f04f 31ff 	movne.w	r1, #4294967295
 80009b8:	f04f 30ff 	movne.w	r0, #4294967295
 80009bc:	f000 b974 	b.w	8000ca8 <__aeabi_idiv0>
 80009c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c8:	f000 f806 	bl	80009d8 <__udivmoddi4>
 80009cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d4:	b004      	add	sp, #16
 80009d6:	4770      	bx	lr

080009d8 <__udivmoddi4>:
 80009d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009dc:	9d08      	ldr	r5, [sp, #32]
 80009de:	4604      	mov	r4, r0
 80009e0:	468e      	mov	lr, r1
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d14d      	bne.n	8000a82 <__udivmoddi4+0xaa>
 80009e6:	428a      	cmp	r2, r1
 80009e8:	4694      	mov	ip, r2
 80009ea:	d969      	bls.n	8000ac0 <__udivmoddi4+0xe8>
 80009ec:	fab2 f282 	clz	r2, r2
 80009f0:	b152      	cbz	r2, 8000a08 <__udivmoddi4+0x30>
 80009f2:	fa01 f302 	lsl.w	r3, r1, r2
 80009f6:	f1c2 0120 	rsb	r1, r2, #32
 80009fa:	fa20 f101 	lsr.w	r1, r0, r1
 80009fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a02:	ea41 0e03 	orr.w	lr, r1, r3
 8000a06:	4094      	lsls	r4, r2
 8000a08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a0c:	0c21      	lsrs	r1, r4, #16
 8000a0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000a12:	fa1f f78c 	uxth.w	r7, ip
 8000a16:	fb08 e316 	mls	r3, r8, r6, lr
 8000a1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a1e:	fb06 f107 	mul.w	r1, r6, r7
 8000a22:	4299      	cmp	r1, r3
 8000a24:	d90a      	bls.n	8000a3c <__udivmoddi4+0x64>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a2e:	f080 811f 	bcs.w	8000c70 <__udivmoddi4+0x298>
 8000a32:	4299      	cmp	r1, r3
 8000a34:	f240 811c 	bls.w	8000c70 <__udivmoddi4+0x298>
 8000a38:	3e02      	subs	r6, #2
 8000a3a:	4463      	add	r3, ip
 8000a3c:	1a5b      	subs	r3, r3, r1
 8000a3e:	b2a4      	uxth	r4, r4
 8000a40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a44:	fb08 3310 	mls	r3, r8, r0, r3
 8000a48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a4c:	fb00 f707 	mul.w	r7, r0, r7
 8000a50:	42a7      	cmp	r7, r4
 8000a52:	d90a      	bls.n	8000a6a <__udivmoddi4+0x92>
 8000a54:	eb1c 0404 	adds.w	r4, ip, r4
 8000a58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a5c:	f080 810a 	bcs.w	8000c74 <__udivmoddi4+0x29c>
 8000a60:	42a7      	cmp	r7, r4
 8000a62:	f240 8107 	bls.w	8000c74 <__udivmoddi4+0x29c>
 8000a66:	4464      	add	r4, ip
 8000a68:	3802      	subs	r0, #2
 8000a6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6e:	1be4      	subs	r4, r4, r7
 8000a70:	2600      	movs	r6, #0
 8000a72:	b11d      	cbz	r5, 8000a7c <__udivmoddi4+0xa4>
 8000a74:	40d4      	lsrs	r4, r2
 8000a76:	2300      	movs	r3, #0
 8000a78:	e9c5 4300 	strd	r4, r3, [r5]
 8000a7c:	4631      	mov	r1, r6
 8000a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a82:	428b      	cmp	r3, r1
 8000a84:	d909      	bls.n	8000a9a <__udivmoddi4+0xc2>
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	f000 80ef 	beq.w	8000c6a <__udivmoddi4+0x292>
 8000a8c:	2600      	movs	r6, #0
 8000a8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a92:	4630      	mov	r0, r6
 8000a94:	4631      	mov	r1, r6
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	fab3 f683 	clz	r6, r3
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	d14a      	bne.n	8000b38 <__udivmoddi4+0x160>
 8000aa2:	428b      	cmp	r3, r1
 8000aa4:	d302      	bcc.n	8000aac <__udivmoddi4+0xd4>
 8000aa6:	4282      	cmp	r2, r0
 8000aa8:	f200 80f9 	bhi.w	8000c9e <__udivmoddi4+0x2c6>
 8000aac:	1a84      	subs	r4, r0, r2
 8000aae:	eb61 0303 	sbc.w	r3, r1, r3
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	469e      	mov	lr, r3
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d0e0      	beq.n	8000a7c <__udivmoddi4+0xa4>
 8000aba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000abe:	e7dd      	b.n	8000a7c <__udivmoddi4+0xa4>
 8000ac0:	b902      	cbnz	r2, 8000ac4 <__udivmoddi4+0xec>
 8000ac2:	deff      	udf	#255	; 0xff
 8000ac4:	fab2 f282 	clz	r2, r2
 8000ac8:	2a00      	cmp	r2, #0
 8000aca:	f040 8092 	bne.w	8000bf2 <__udivmoddi4+0x21a>
 8000ace:	eba1 010c 	sub.w	r1, r1, ip
 8000ad2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad6:	fa1f fe8c 	uxth.w	lr, ip
 8000ada:	2601      	movs	r6, #1
 8000adc:	0c20      	lsrs	r0, r4, #16
 8000ade:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ae2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ae6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000aea:	fb0e f003 	mul.w	r0, lr, r3
 8000aee:	4288      	cmp	r0, r1
 8000af0:	d908      	bls.n	8000b04 <__udivmoddi4+0x12c>
 8000af2:	eb1c 0101 	adds.w	r1, ip, r1
 8000af6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000afa:	d202      	bcs.n	8000b02 <__udivmoddi4+0x12a>
 8000afc:	4288      	cmp	r0, r1
 8000afe:	f200 80cb 	bhi.w	8000c98 <__udivmoddi4+0x2c0>
 8000b02:	4643      	mov	r3, r8
 8000b04:	1a09      	subs	r1, r1, r0
 8000b06:	b2a4      	uxth	r4, r4
 8000b08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000b10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b14:	fb0e fe00 	mul.w	lr, lr, r0
 8000b18:	45a6      	cmp	lr, r4
 8000b1a:	d908      	bls.n	8000b2e <__udivmoddi4+0x156>
 8000b1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b24:	d202      	bcs.n	8000b2c <__udivmoddi4+0x154>
 8000b26:	45a6      	cmp	lr, r4
 8000b28:	f200 80bb 	bhi.w	8000ca2 <__udivmoddi4+0x2ca>
 8000b2c:	4608      	mov	r0, r1
 8000b2e:	eba4 040e 	sub.w	r4, r4, lr
 8000b32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b36:	e79c      	b.n	8000a72 <__udivmoddi4+0x9a>
 8000b38:	f1c6 0720 	rsb	r7, r6, #32
 8000b3c:	40b3      	lsls	r3, r6
 8000b3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b46:	fa20 f407 	lsr.w	r4, r0, r7
 8000b4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4e:	431c      	orrs	r4, r3
 8000b50:	40f9      	lsrs	r1, r7
 8000b52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b56:	fa00 f306 	lsl.w	r3, r0, r6
 8000b5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b5e:	0c20      	lsrs	r0, r4, #16
 8000b60:	fa1f fe8c 	uxth.w	lr, ip
 8000b64:	fb09 1118 	mls	r1, r9, r8, r1
 8000b68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000b70:	4288      	cmp	r0, r1
 8000b72:	fa02 f206 	lsl.w	r2, r2, r6
 8000b76:	d90b      	bls.n	8000b90 <__udivmoddi4+0x1b8>
 8000b78:	eb1c 0101 	adds.w	r1, ip, r1
 8000b7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b80:	f080 8088 	bcs.w	8000c94 <__udivmoddi4+0x2bc>
 8000b84:	4288      	cmp	r0, r1
 8000b86:	f240 8085 	bls.w	8000c94 <__udivmoddi4+0x2bc>
 8000b8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	1a09      	subs	r1, r1, r0
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b98:	fb09 1110 	mls	r1, r9, r0, r1
 8000b9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ba0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba4:	458e      	cmp	lr, r1
 8000ba6:	d908      	bls.n	8000bba <__udivmoddi4+0x1e2>
 8000ba8:	eb1c 0101 	adds.w	r1, ip, r1
 8000bac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bb0:	d26c      	bcs.n	8000c8c <__udivmoddi4+0x2b4>
 8000bb2:	458e      	cmp	lr, r1
 8000bb4:	d96a      	bls.n	8000c8c <__udivmoddi4+0x2b4>
 8000bb6:	3802      	subs	r0, #2
 8000bb8:	4461      	add	r1, ip
 8000bba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000bc2:	eba1 010e 	sub.w	r1, r1, lr
 8000bc6:	42a1      	cmp	r1, r4
 8000bc8:	46c8      	mov	r8, r9
 8000bca:	46a6      	mov	lr, r4
 8000bcc:	d356      	bcc.n	8000c7c <__udivmoddi4+0x2a4>
 8000bce:	d053      	beq.n	8000c78 <__udivmoddi4+0x2a0>
 8000bd0:	b15d      	cbz	r5, 8000bea <__udivmoddi4+0x212>
 8000bd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000bd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000bda:	fa01 f707 	lsl.w	r7, r1, r7
 8000bde:	fa22 f306 	lsr.w	r3, r2, r6
 8000be2:	40f1      	lsrs	r1, r6
 8000be4:	431f      	orrs	r7, r3
 8000be6:	e9c5 7100 	strd	r7, r1, [r5]
 8000bea:	2600      	movs	r6, #0
 8000bec:	4631      	mov	r1, r6
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	40d8      	lsrs	r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000c00:	4091      	lsls	r1, r2
 8000c02:	4301      	orrs	r1, r0
 8000c04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c08:	fa1f fe8c 	uxth.w	lr, ip
 8000c0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c10:	fb07 3610 	mls	r6, r7, r0, r3
 8000c14:	0c0b      	lsrs	r3, r1, #16
 8000c16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	fa04 f402 	lsl.w	r4, r4, r2
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x260>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c2e:	d22f      	bcs.n	8000c90 <__udivmoddi4+0x2b8>
 8000c30:	429e      	cmp	r6, r3
 8000c32:	d92d      	bls.n	8000c90 <__udivmoddi4+0x2b8>
 8000c34:	3802      	subs	r0, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1b9b      	subs	r3, r3, r6
 8000c3a:	b289      	uxth	r1, r1
 8000c3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c40:	fb07 3316 	mls	r3, r7, r6, r3
 8000c44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c48:	fb06 f30e 	mul.w	r3, r6, lr
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x28a>
 8000c50:	eb1c 0101 	adds.w	r1, ip, r1
 8000c54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c58:	d216      	bcs.n	8000c88 <__udivmoddi4+0x2b0>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d914      	bls.n	8000c88 <__udivmoddi4+0x2b0>
 8000c5e:	3e02      	subs	r6, #2
 8000c60:	4461      	add	r1, ip
 8000c62:	1ac9      	subs	r1, r1, r3
 8000c64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c68:	e738      	b.n	8000adc <__udivmoddi4+0x104>
 8000c6a:	462e      	mov	r6, r5
 8000c6c:	4628      	mov	r0, r5
 8000c6e:	e705      	b.n	8000a7c <__udivmoddi4+0xa4>
 8000c70:	4606      	mov	r6, r0
 8000c72:	e6e3      	b.n	8000a3c <__udivmoddi4+0x64>
 8000c74:	4618      	mov	r0, r3
 8000c76:	e6f8      	b.n	8000a6a <__udivmoddi4+0x92>
 8000c78:	454b      	cmp	r3, r9
 8000c7a:	d2a9      	bcs.n	8000bd0 <__udivmoddi4+0x1f8>
 8000c7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000c80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c84:	3801      	subs	r0, #1
 8000c86:	e7a3      	b.n	8000bd0 <__udivmoddi4+0x1f8>
 8000c88:	4646      	mov	r6, r8
 8000c8a:	e7ea      	b.n	8000c62 <__udivmoddi4+0x28a>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	e794      	b.n	8000bba <__udivmoddi4+0x1e2>
 8000c90:	4640      	mov	r0, r8
 8000c92:	e7d1      	b.n	8000c38 <__udivmoddi4+0x260>
 8000c94:	46d0      	mov	r8, sl
 8000c96:	e77b      	b.n	8000b90 <__udivmoddi4+0x1b8>
 8000c98:	3b02      	subs	r3, #2
 8000c9a:	4461      	add	r1, ip
 8000c9c:	e732      	b.n	8000b04 <__udivmoddi4+0x12c>
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	e709      	b.n	8000ab6 <__udivmoddi4+0xde>
 8000ca2:	4464      	add	r4, ip
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	e742      	b.n	8000b2e <__udivmoddi4+0x156>

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb0:	f000 fb3f 	bl	8001332 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb4:	f000 f822 	bl	8000cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb8:	f000 f97c 	bl	8000fb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cbc:	f000 f94a 	bl	8000f54 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000cc0:	f000 f87e 	bl	8000dc0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000cc4:	f000 f8d0 	bl	8000e68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  SERVO_Init(SERVO_Motor1);
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f003 fb7d 	bl	80043c8 <SERVO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      SERVO_MoveTo(SERVO_Motor1, 0);
 8000cce:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8000cf4 <main+0x48>
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f003 fd64 	bl	80047a0 <SERVO_MoveTo>
      HAL_Delay(2000);
 8000cd8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cdc:	f000 fb9e 	bl	800141c <HAL_Delay>
      SERVO_MoveTo(SERVO_Motor1, 60);
 8000ce0:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000cf8 <main+0x4c>
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f003 fd5b 	bl	80047a0 <SERVO_MoveTo>
      HAL_Delay(2000);
 8000cea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cee:	f000 fb95 	bl	800141c <HAL_Delay>
      SERVO_MoveTo(SERVO_Motor1, 0);
 8000cf2:	e7ec      	b.n	8000cce <main+0x22>
 8000cf4:	00000000 	.word	0x00000000
 8000cf8:	42700000 	.word	0x42700000

08000cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b096      	sub	sp, #88	; 0x58
 8000d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	2244      	movs	r2, #68	; 0x44
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f003 fdec 	bl	80048e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d10:	463b      	mov	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d22:	f000 fe25 	bl	8001970 <HAL_PWREx_ControlVoltageScaling>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d2c:	f000 f9a2 	bl	8001074 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d30:	f000 fe00 	bl	8001934 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d34:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <SystemClock_Config+0xc0>)
 8000d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d3a:	4a20      	ldr	r2, [pc, #128]	; (8000dbc <SystemClock_Config+0xc0>)
 8000d3c:	f023 0318 	bic.w	r3, r3, #24
 8000d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000d44:	2314      	movs	r3, #20
 8000d46:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d54:	2360      	movs	r3, #96	; 0x60
 8000d56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000d64:	2310      	movs	r3, #16
 8000d66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d68:	2307      	movs	r3, #7
 8000d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 fe4f 	bl	8001a1c <HAL_RCC_OscConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d84:	f000 f976 	bl	8001074 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d88:	230f      	movs	r3, #15
 8000d8a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	2101      	movs	r1, #1
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fa4f 	bl	8002244 <HAL_RCC_ClockConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000dac:	f000 f962 	bl	8001074 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000db0:	f001 fe62 	bl	8002a78 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000db4:	bf00      	nop
 8000db6:	3758      	adds	r7, #88	; 0x58
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000de0:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <MX_TIM1_Init+0xa4>)
 8000de2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000de6:	220a      	movs	r2, #10
 8000de8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000df2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000df6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e0a:	4815      	ldr	r0, [pc, #84]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000e0c:	f001 ff36 	bl	8002c7c <HAL_TIM_Base_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e16:	f000 f92d 	bl	8001074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	4619      	mov	r1, r3
 8000e26:	480e      	ldr	r0, [pc, #56]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000e28:	f002 f9d2 	bl	80031d0 <HAL_TIM_ConfigClockSource>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e32:	f000 f91f 	bl	8001074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	4619      	mov	r1, r3
 8000e46:	4806      	ldr	r0, [pc, #24]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000e48:	f002 fe2e 	bl	8003aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e52:	f000 f90f 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	3720      	adds	r7, #32
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000028 	.word	0x20000028
 8000e64:	40012c00 	.word	0x40012c00

08000e68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08e      	sub	sp, #56	; 0x38
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e88:	463b      	mov	r3, r7
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]
 8000e96:	615a      	str	r2, [r3, #20]
 8000e98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e9a:	4b2d      	ldr	r3, [pc, #180]	; (8000f50 <MX_TIM2_Init+0xe8>)
 8000e9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ea2:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <MX_TIM2_Init+0xe8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea8:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <MX_TIM2_Init+0xe8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000eae:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <MX_TIM2_Init+0xe8>)
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb6:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <MX_TIM2_Init+0xe8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebc:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <MX_TIM2_Init+0xe8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ec2:	4823      	ldr	r0, [pc, #140]	; (8000f50 <MX_TIM2_Init+0xe8>)
 8000ec4:	f001 feda 	bl	8002c7c <HAL_TIM_Base_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ece:	f000 f8d1 	bl	8001074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ed8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000edc:	4619      	mov	r1, r3
 8000ede:	481c      	ldr	r0, [pc, #112]	; (8000f50 <MX_TIM2_Init+0xe8>)
 8000ee0:	f002 f976 	bl	80031d0 <HAL_TIM_ConfigClockSource>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000eea:	f000 f8c3 	bl	8001074 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000eee:	4818      	ldr	r0, [pc, #96]	; (8000f50 <MX_TIM2_Init+0xe8>)
 8000ef0:	f001 ff1b 	bl	8002d2a <HAL_TIM_PWM_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000efa:	f000 f8bb 	bl	8001074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4810      	ldr	r0, [pc, #64]	; (8000f50 <MX_TIM2_Init+0xe8>)
 8000f0e:	f002 fdcb 	bl	8003aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f18:	f000 f8ac 	bl	8001074 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f1c:	2360      	movs	r3, #96	; 0x60
 8000f1e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4619      	mov	r1, r3
 8000f32:	4807      	ldr	r0, [pc, #28]	; (8000f50 <MX_TIM2_Init+0xe8>)
 8000f34:	f002 f838 	bl	8002fa8 <HAL_TIM_PWM_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000f3e:	f000 f899 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f42:	4803      	ldr	r0, [pc, #12]	; (8000f50 <MX_TIM2_Init+0xe8>)
 8000f44:	f000 f8f2 	bl	800112c <HAL_TIM_MspPostInit>

}
 8000f48:	bf00      	nop
 8000f4a:	3738      	adds	r7, #56	; 0x38
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000074 	.word	0x20000074

08000f54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_USART2_UART_Init+0x58>)
 8000f5a:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <MX_USART2_UART_Init+0x5c>)
 8000f5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <MX_USART2_UART_Init+0x58>)
 8000f60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_USART2_UART_Init+0x58>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_USART2_UART_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_USART2_UART_Init+0x58>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_USART2_UART_Init+0x58>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <MX_USART2_UART_Init+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_USART2_UART_Init+0x58>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <MX_USART2_UART_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_USART2_UART_Init+0x58>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_USART2_UART_Init+0x58>)
 8000f98:	f002 fdec 	bl	8003b74 <HAL_UART_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fa2:	f000 f867 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200000c0 	.word	0x200000c0
 8000fb0:	40004400 	.word	0x40004400

08000fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	4b28      	ldr	r3, [pc, #160]	; (800106c <MX_GPIO_Init+0xb8>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	4a27      	ldr	r2, [pc, #156]	; (800106c <MX_GPIO_Init+0xb8>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <MX_GPIO_Init+0xb8>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	4b22      	ldr	r3, [pc, #136]	; (800106c <MX_GPIO_Init+0xb8>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a21      	ldr	r2, [pc, #132]	; (800106c <MX_GPIO_Init+0xb8>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b1f      	ldr	r3, [pc, #124]	; (800106c <MX_GPIO_Init+0xb8>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_GPIO_Init+0xb8>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	4a1b      	ldr	r2, [pc, #108]	; (800106c <MX_GPIO_Init+0xb8>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <MX_GPIO_Init+0xb8>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2108      	movs	r1, #8
 8001016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101a:	f000 fc73 	bl	8001904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2108      	movs	r1, #8
 8001022:	4813      	ldr	r0, [pc, #76]	; (8001070 <MX_GPIO_Init+0xbc>)
 8001024:	f000 fc6e 	bl	8001904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001028:	2308      	movs	r3, #8
 800102a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001042:	f000 faf5 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001046:	2308      	movs	r3, #8
 8001048:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	4619      	mov	r1, r3
 800105c:	4804      	ldr	r0, [pc, #16]	; (8001070 <MX_GPIO_Init+0xbc>)
 800105e:	f000 fae7 	bl	8001630 <HAL_GPIO_Init>

}
 8001062:	bf00      	nop
 8001064:	3720      	adds	r7, #32
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000
 8001070:	48000400 	.word	0x48000400

08001074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001078:	b672      	cpsid	i
}
 800107a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800107c:	e7fe      	b.n	800107c <Error_Handler+0x8>
	...

08001080 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <HAL_MspInit+0x44>)
 8001088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108a:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <HAL_MspInit+0x44>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6613      	str	r3, [r2, #96]	; 0x60
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <HAL_MspInit+0x44>)
 8001094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_MspInit+0x44>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <HAL_MspInit+0x44>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a8:	6593      	str	r3, [r2, #88]	; 0x58
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_MspInit+0x44>)
 80010ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000

080010c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a13      	ldr	r2, [pc, #76]	; (8001124 <HAL_TIM_Base_MspInit+0x5c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d10c      	bne.n	80010f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_TIM_Base_MspInit+0x60>)
 80010dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010de:	4a12      	ldr	r2, [pc, #72]	; (8001128 <HAL_TIM_Base_MspInit+0x60>)
 80010e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010e4:	6613      	str	r3, [r2, #96]	; 0x60
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <HAL_TIM_Base_MspInit+0x60>)
 80010e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010f2:	e010      	b.n	8001116 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010fc:	d10b      	bne.n	8001116 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_TIM_Base_MspInit+0x60>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	4a09      	ldr	r2, [pc, #36]	; (8001128 <HAL_TIM_Base_MspInit+0x60>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6593      	str	r3, [r2, #88]	; 0x58
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <HAL_TIM_Base_MspInit+0x60>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40012c00 	.word	0x40012c00
 8001128:	40021000 	.word	0x40021000

0800112c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800114c:	d11c      	bne.n	8001188 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_TIM_MspPostInit+0x64>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <HAL_TIM_MspPostInit+0x64>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <HAL_TIM_MspPostInit+0x64>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001166:	2320      	movs	r3, #32
 8001168:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001176:	2301      	movs	r3, #1
 8001178:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	4619      	mov	r1, r3
 8001180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001184:	f000 fa54 	bl	8001630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40021000 	.word	0x40021000

08001194 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b09e      	sub	sp, #120	; 0x78
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	2254      	movs	r2, #84	; 0x54
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f003 fb97 	bl	80048e8 <memset>
  if(huart->Instance==USART2)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a28      	ldr	r2, [pc, #160]	; (8001260 <HAL_UART_MspInit+0xcc>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d148      	bne.n	8001256 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011c4:	2302      	movs	r3, #2
 80011c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 fa5b 	bl	800268c <HAL_RCCEx_PeriphCLKConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011dc:	f7ff ff4a 	bl	8001074 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011e0:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_UART_MspInit+0xd0>)
 80011e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e4:	4a1f      	ldr	r2, [pc, #124]	; (8001264 <HAL_UART_MspInit+0xd0>)
 80011e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ea:	6593      	str	r3, [r2, #88]	; 0x58
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <HAL_UART_MspInit+0xd0>)
 80011ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_UART_MspInit+0xd0>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fc:	4a19      	ldr	r2, [pc, #100]	; (8001264 <HAL_UART_MspInit+0xd0>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HAL_UART_MspInit+0xd0>)
 8001206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001210:	2304      	movs	r3, #4
 8001212:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001220:	2307      	movs	r3, #7
 8001222:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001228:	4619      	mov	r1, r3
 800122a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122e:	f000 f9ff 	bl	8001630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001236:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001244:	2303      	movs	r3, #3
 8001246:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001252:	f000 f9ed 	bl	8001630 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3778      	adds	r7, #120	; 0x78
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40004400 	.word	0x40004400
 8001264:	40021000 	.word	0x40021000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800126c:	e7fe      	b.n	800126c <NMI_Handler+0x4>

0800126e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <MemManage_Handler+0x4>

0800127a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <UsageFault_Handler+0x4>

08001286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b4:	f000 f892 	bl	80013dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <SystemInit+0x20>)
 80012c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <SystemInit+0x20>)
 80012c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001318 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012e4:	f7ff ffea 	bl	80012bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <LoopForever+0x6>)
  ldr r1, =_edata
 80012ea:	490d      	ldr	r1, [pc, #52]	; (8001320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <LoopForever+0xe>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f0:	e002      	b.n	80012f8 <LoopCopyDataInit>

080012f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f6:	3304      	adds	r3, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012fc:	d3f9      	bcc.n	80012f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001300:	4c0a      	ldr	r4, [pc, #40]	; (800132c <LoopForever+0x16>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001304:	e001      	b.n	800130a <LoopFillZerobss>

08001306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001308:	3204      	adds	r2, #4

0800130a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800130c:	d3fb      	bcc.n	8001306 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800130e:	f003 fac7 	bl	80048a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001312:	f7ff fccb 	bl	8000cac <main>

08001316 <LoopForever>:

LoopForever:
    b LoopForever
 8001316:	e7fe      	b.n	8001316 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001318:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800131c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001320:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001324:	08004988 	.word	0x08004988
  ldr r2, =_sbss
 8001328:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800132c:	2000014c 	.word	0x2000014c

08001330 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <ADC1_IRQHandler>

08001332 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001338:	2300      	movs	r3, #0
 800133a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133c:	2003      	movs	r0, #3
 800133e:	f000 f943 	bl	80015c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001342:	2000      	movs	r0, #0
 8001344:	f000 f80e 	bl	8001364 <HAL_InitTick>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	71fb      	strb	r3, [r7, #7]
 8001352:	e001      	b.n	8001358 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001354:	f7ff fe94 	bl	8001080 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001358:	79fb      	ldrb	r3, [r7, #7]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <HAL_InitTick+0x6c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d023      	beq.n	80013c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_InitTick+0x70>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <HAL_InitTick+0x6c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001386:	fbb3 f3f1 	udiv	r3, r3, r1
 800138a:	fbb2 f3f3 	udiv	r3, r2, r3
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f941 	bl	8001616 <HAL_SYSTICK_Config>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10f      	bne.n	80013ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b0f      	cmp	r3, #15
 800139e:	d809      	bhi.n	80013b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a0:	2200      	movs	r2, #0
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	f000 f919 	bl	80015de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ac:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <HAL_InitTick+0x74>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e007      	b.n	80013c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e004      	b.n	80013c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	e001      	b.n	80013c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000008 	.word	0x20000008
 80013d4:	20000000 	.word	0x20000000
 80013d8:	20000004 	.word	0x20000004

080013dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x20>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x24>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <HAL_IncTick+0x24>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000008 	.word	0x20000008
 8001400:	20000144 	.word	0x20000144

08001404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <HAL_GetTick+0x14>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000144 	.word	0x20000144

0800141c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001424:	f7ff ffee 	bl	8001404 <HAL_GetTick>
 8001428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001434:	d005      	beq.n	8001442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_Delay+0x44>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001442:	bf00      	nop
 8001444:	f7ff ffde 	bl	8001404 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	429a      	cmp	r2, r3
 8001452:	d8f7      	bhi.n	8001444 <HAL_Delay+0x28>
  {
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000008 	.word	0x20000008

08001464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800148c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001496:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	60d3      	str	r3, [r2, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <__NVIC_GetPriorityGrouping+0x18>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	f003 0307 	and.w	r3, r3, #7
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db0a      	blt.n	80014f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	490c      	ldr	r1, [pc, #48]	; (8001514 <__NVIC_SetPriority+0x4c>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f0:	e00a      	b.n	8001508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4908      	ldr	r1, [pc, #32]	; (8001518 <__NVIC_SetPriority+0x50>)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	3b04      	subs	r3, #4
 8001500:	0112      	lsls	r2, r2, #4
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	440b      	add	r3, r1
 8001506:	761a      	strb	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000e100 	.word	0xe000e100
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	; 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f1c3 0307 	rsb	r3, r3, #7
 8001536:	2b04      	cmp	r3, #4
 8001538:	bf28      	it	cs
 800153a:	2304      	movcs	r3, #4
 800153c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3304      	adds	r3, #4
 8001542:	2b06      	cmp	r3, #6
 8001544:	d902      	bls.n	800154c <NVIC_EncodePriority+0x30>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3b03      	subs	r3, #3
 800154a:	e000      	b.n	800154e <NVIC_EncodePriority+0x32>
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43da      	mvns	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43d9      	mvns	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	4313      	orrs	r3, r2
         );
}
 8001576:	4618      	mov	r0, r3
 8001578:	3724      	adds	r7, #36	; 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001594:	d301      	bcc.n	800159a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001596:	2301      	movs	r3, #1
 8001598:	e00f      	b.n	80015ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <SysTick_Config+0x40>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a2:	210f      	movs	r1, #15
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f7ff ff8e 	bl	80014c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <SysTick_Config+0x40>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <SysTick_Config+0x40>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	e000e010 	.word	0xe000e010

080015c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ff47 	bl	8001464 <__NVIC_SetPriorityGrouping>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015f0:	f7ff ff5c 	bl	80014ac <__NVIC_GetPriorityGrouping>
 80015f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	6978      	ldr	r0, [r7, #20]
 80015fc:	f7ff ff8e 	bl	800151c <NVIC_EncodePriority>
 8001600:	4602      	mov	r2, r0
 8001602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff5d 	bl	80014c8 <__NVIC_SetPriority>
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ffb0 	bl	8001584 <SysTick_Config>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163e:	e148      	b.n	80018d2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	2101      	movs	r1, #1
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	4013      	ands	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 813a 	beq.w	80018cc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b01      	cmp	r3, #1
 8001662:	d005      	beq.n	8001670 <HAL_GPIO_Init+0x40>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d130      	bne.n	80016d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016a6:	2201      	movs	r2, #1
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	f003 0201 	and.w	r2, r3, #1
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d017      	beq.n	800170e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	2203      	movs	r2, #3
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d123      	bne.n	8001762 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	08da      	lsrs	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3208      	adds	r2, #8
 8001722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	220f      	movs	r2, #15
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	691a      	ldr	r2, [r3, #16]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	08da      	lsrs	r2, r3, #3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3208      	adds	r2, #8
 800175c:	6939      	ldr	r1, [r7, #16]
 800175e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0203 	and.w	r2, r3, #3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 8094 	beq.w	80018cc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a4:	4b52      	ldr	r3, [pc, #328]	; (80018f0 <HAL_GPIO_Init+0x2c0>)
 80017a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a8:	4a51      	ldr	r2, [pc, #324]	; (80018f0 <HAL_GPIO_Init+0x2c0>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6613      	str	r3, [r2, #96]	; 0x60
 80017b0:	4b4f      	ldr	r3, [pc, #316]	; (80018f0 <HAL_GPIO_Init+0x2c0>)
 80017b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017bc:	4a4d      	ldr	r2, [pc, #308]	; (80018f4 <HAL_GPIO_Init+0x2c4>)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	089b      	lsrs	r3, r3, #2
 80017c2:	3302      	adds	r3, #2
 80017c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	220f      	movs	r2, #15
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017e6:	d00d      	beq.n	8001804 <HAL_GPIO_Init+0x1d4>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a43      	ldr	r2, [pc, #268]	; (80018f8 <HAL_GPIO_Init+0x2c8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d007      	beq.n	8001800 <HAL_GPIO_Init+0x1d0>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a42      	ldr	r2, [pc, #264]	; (80018fc <HAL_GPIO_Init+0x2cc>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d101      	bne.n	80017fc <HAL_GPIO_Init+0x1cc>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e004      	b.n	8001806 <HAL_GPIO_Init+0x1d6>
 80017fc:	2307      	movs	r3, #7
 80017fe:	e002      	b.n	8001806 <HAL_GPIO_Init+0x1d6>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <HAL_GPIO_Init+0x1d6>
 8001804:	2300      	movs	r3, #0
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	f002 0203 	and.w	r2, r2, #3
 800180c:	0092      	lsls	r2, r2, #2
 800180e:	4093      	lsls	r3, r2
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001816:	4937      	ldr	r1, [pc, #220]	; (80018f4 <HAL_GPIO_Init+0x2c4>)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	3302      	adds	r3, #2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001824:	4b36      	ldr	r3, [pc, #216]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001848:	4a2d      	ldr	r2, [pc, #180]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800184e:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001872:	4a23      	ldr	r2, [pc, #140]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001878:	4b21      	ldr	r3, [pc, #132]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	43db      	mvns	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800189c:	4a18      	ldr	r2, [pc, #96]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018c6:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f47f aeaf 	bne.w	8001640 <HAL_GPIO_Init+0x10>
  }
}
 80018e2:	bf00      	nop
 80018e4:	bf00      	nop
 80018e6:	371c      	adds	r7, #28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010000 	.word	0x40010000
 80018f8:	48000400 	.word	0x48000400
 80018fc:	48000800 	.word	0x48000800
 8001900:	40010400 	.word	0x40010400

08001904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
 8001910:	4613      	mov	r3, r2
 8001912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001914:	787b      	ldrb	r3, [r7, #1]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800191a:	887a      	ldrh	r2, [r7, #2]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001920:	e002      	b.n	8001928 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001922:	887a      	ldrh	r2, [r7, #2]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800193e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001942:	6013      	str	r3, [r2, #0]
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40007000 	.word	0x40007000

08001954 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <HAL_PWREx_GetVoltageRange+0x18>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40007000 	.word	0x40007000

08001970 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800197e:	d130      	bne.n	80019e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800198c:	d038      	beq.n	8001a00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001996:	4a1e      	ldr	r2, [pc, #120]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001998:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800199c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800199e:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2232      	movs	r2, #50	; 0x32
 80019a4:	fb02 f303 	mul.w	r3, r2, r3
 80019a8:	4a1b      	ldr	r2, [pc, #108]	; (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	0c9b      	lsrs	r3, r3, #18
 80019b0:	3301      	adds	r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019b4:	e002      	b.n	80019bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c8:	d102      	bne.n	80019d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f2      	bne.n	80019b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019dc:	d110      	bne.n	8001a00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e00f      	b.n	8001a02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ee:	d007      	beq.n	8001a00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019f8:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40007000 	.word	0x40007000
 8001a14:	20000000 	.word	0x20000000
 8001a18:	431bde83 	.word	0x431bde83

08001a1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d102      	bne.n	8001a30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f000 bc02 	b.w	8002234 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a30:	4b96      	ldr	r3, [pc, #600]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a3a:	4b94      	ldr	r3, [pc, #592]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 80e4 	beq.w	8001c1a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d007      	beq.n	8001a68 <HAL_RCC_OscConfig+0x4c>
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2b0c      	cmp	r3, #12
 8001a5c:	f040 808b 	bne.w	8001b76 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	f040 8087 	bne.w	8001b76 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a68:	4b88      	ldr	r3, [pc, #544]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_OscConfig+0x64>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e3d9      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1a      	ldr	r2, [r3, #32]
 8001a84:	4b81      	ldr	r3, [pc, #516]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <HAL_RCC_OscConfig+0x7e>
 8001a90:	4b7e      	ldr	r3, [pc, #504]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a98:	e005      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8a>
 8001a9a:	4b7c      	ldr	r3, [pc, #496]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d223      	bcs.n	8001af2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 fd8c 	bl	80025cc <RCC_SetFlashLatencyFromMSIRange>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e3ba      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001abe:	4b73      	ldr	r3, [pc, #460]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a72      	ldr	r2, [pc, #456]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001ac4:	f043 0308 	orr.w	r3, r3, #8
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b70      	ldr	r3, [pc, #448]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	496d      	ldr	r1, [pc, #436]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001adc:	4b6b      	ldr	r3, [pc, #428]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	4968      	ldr	r1, [pc, #416]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
 8001af0:	e025      	b.n	8001b3e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af2:	4b66      	ldr	r3, [pc, #408]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a65      	ldr	r2, [pc, #404]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001af8:	f043 0308 	orr.w	r3, r3, #8
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b63      	ldr	r3, [pc, #396]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	4960      	ldr	r1, [pc, #384]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b10:	4b5e      	ldr	r3, [pc, #376]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	495b      	ldr	r1, [pc, #364]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 fd4c 	bl	80025cc <RCC_SetFlashLatencyFromMSIRange>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e37a      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b3e:	f000 fc81 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4b51      	ldr	r3, [pc, #324]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	4950      	ldr	r1, [pc, #320]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001b50:	5ccb      	ldrb	r3, [r1, r3]
 8001b52:	f003 031f 	and.w	r3, r3, #31
 8001b56:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5a:	4a4e      	ldr	r2, [pc, #312]	; (8001c94 <HAL_RCC_OscConfig+0x278>)
 8001b5c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b5e:	4b4e      	ldr	r3, [pc, #312]	; (8001c98 <HAL_RCC_OscConfig+0x27c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fbfe 	bl	8001364 <HAL_InitTick>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d052      	beq.n	8001c18 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	e35e      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d032      	beq.n	8001be4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b7e:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a42      	ldr	r2, [pc, #264]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b8a:	f7ff fc3b 	bl	8001404 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b92:	f7ff fc37 	bl	8001404 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e347      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ba4:	4b39      	ldr	r3, [pc, #228]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bb0:	4b36      	ldr	r3, [pc, #216]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a35      	ldr	r2, [pc, #212]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001bb6:	f043 0308 	orr.w	r3, r3, #8
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4930      	ldr	r1, [pc, #192]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bce:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	492b      	ldr	r1, [pc, #172]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	604b      	str	r3, [r1, #4]
 8001be2:	e01a      	b.n	8001c1a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001be4:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a28      	ldr	r2, [pc, #160]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001bea:	f023 0301 	bic.w	r3, r3, #1
 8001bee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fc08 	bl	8001404 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fc04 	bl	8001404 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e314      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x1dc>
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d073      	beq.n	8001d0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_OscConfig+0x21c>
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2b0c      	cmp	r3, #12
 8001c30:	d10e      	bne.n	8001c50 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d10b      	bne.n	8001c50 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d063      	beq.n	8001d0c <HAL_RCC_OscConfig+0x2f0>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d15f      	bne.n	8001d0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e2f1      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c58:	d106      	bne.n	8001c68 <HAL_RCC_OscConfig+0x24c>
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e025      	b.n	8001cb4 <HAL_RCC_OscConfig+0x298>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c70:	d114      	bne.n	8001c9c <HAL_RCC_OscConfig+0x280>
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a02      	ldr	r2, [pc, #8]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e013      	b.n	8001cb4 <HAL_RCC_OscConfig+0x298>
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	08004910 	.word	0x08004910
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000004 	.word	0x20000004
 8001c9c:	4ba0      	ldr	r3, [pc, #640]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a9f      	ldr	r2, [pc, #636]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b9d      	ldr	r3, [pc, #628]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a9c      	ldr	r2, [pc, #624]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d013      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fba2 	bl	8001404 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff fb9e 	bl	8001404 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e2ae      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cd6:	4b92      	ldr	r3, [pc, #584]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x2a8>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fb8e 	bl	8001404 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff fb8a 	bl	8001404 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e29a      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cfe:	4b88      	ldr	r3, [pc, #544]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x2d0>
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d060      	beq.n	8001ddc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_OscConfig+0x310>
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2b0c      	cmp	r3, #12
 8001d24:	d119      	bne.n	8001d5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d116      	bne.n	8001d5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d2c:	4b7c      	ldr	r3, [pc, #496]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_OscConfig+0x328>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e277      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d44:	4b76      	ldr	r3, [pc, #472]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	061b      	lsls	r3, r3, #24
 8001d52:	4973      	ldr	r1, [pc, #460]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d58:	e040      	b.n	8001ddc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d023      	beq.n	8001daa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d62:	4b6f      	ldr	r3, [pc, #444]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a6e      	ldr	r2, [pc, #440]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6e:	f7ff fb49 	bl	8001404 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d76:	f7ff fb45 	bl	8001404 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e255      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d88:	4b65      	ldr	r3, [pc, #404]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d94:	4b62      	ldr	r3, [pc, #392]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	061b      	lsls	r3, r3, #24
 8001da2:	495f      	ldr	r1, [pc, #380]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
 8001da8:	e018      	b.n	8001ddc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001daa:	4b5d      	ldr	r3, [pc, #372]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a5c      	ldr	r2, [pc, #368]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7ff fb25 	bl	8001404 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7ff fb21 	bl	8001404 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e231      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd0:	4b53      	ldr	r3, [pc, #332]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f0      	bne.n	8001dbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d03c      	beq.n	8001e62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01c      	beq.n	8001e2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df6:	4a4a      	ldr	r2, [pc, #296]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e00:	f7ff fb00 	bl	8001404 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e08:	f7ff fafc 	bl	8001404 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e20c      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e1a:	4b41      	ldr	r3, [pc, #260]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0ef      	beq.n	8001e08 <HAL_RCC_OscConfig+0x3ec>
 8001e28:	e01b      	b.n	8001e62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e30:	4a3b      	ldr	r2, [pc, #236]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3a:	f7ff fae3 	bl	8001404 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e42:	f7ff fadf 	bl	8001404 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e1ef      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e54:	4b32      	ldr	r3, [pc, #200]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1ef      	bne.n	8001e42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80a6 	beq.w	8001fbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e70:	2300      	movs	r3, #0
 8001e72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e74:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10d      	bne.n	8001e9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e80:	4b27      	ldr	r3, [pc, #156]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e84:	4a26      	ldr	r2, [pc, #152]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e8c:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e9c:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <HAL_RCC_OscConfig+0x508>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d118      	bne.n	8001eda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ea8:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <HAL_RCC_OscConfig+0x508>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1d      	ldr	r2, [pc, #116]	; (8001f24 <HAL_RCC_OscConfig+0x508>)
 8001eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb4:	f7ff faa6 	bl	8001404 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebc:	f7ff faa2 	bl	8001404 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e1b2      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <HAL_RCC_OscConfig+0x508>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d108      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x4d8>
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ef2:	e029      	b.n	8001f48 <HAL_RCC_OscConfig+0x52c>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b05      	cmp	r3, #5
 8001efa:	d115      	bne.n	8001f28 <HAL_RCC_OscConfig+0x50c>
 8001efc:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f02:	4a07      	ldr	r2, [pc, #28]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001f04:	f043 0304 	orr.w	r3, r3, #4
 8001f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	4a03      	ldr	r2, [pc, #12]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f1c:	e014      	b.n	8001f48 <HAL_RCC_OscConfig+0x52c>
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40007000 	.word	0x40007000
 8001f28:	4b9a      	ldr	r3, [pc, #616]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2e:	4a99      	ldr	r2, [pc, #612]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f38:	4b96      	ldr	r3, [pc, #600]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3e:	4a95      	ldr	r2, [pc, #596]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001f40:	f023 0304 	bic.w	r3, r3, #4
 8001f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d016      	beq.n	8001f7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7ff fa58 	bl	8001404 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f58:	f7ff fa54 	bl	8001404 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e162      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f6e:	4b89      	ldr	r3, [pc, #548]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0ed      	beq.n	8001f58 <HAL_RCC_OscConfig+0x53c>
 8001f7c:	e015      	b.n	8001faa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7e:	f7ff fa41 	bl	8001404 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7ff fa3d 	bl	8001404 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e14b      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f9c:	4b7d      	ldr	r3, [pc, #500]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1ed      	bne.n	8001f86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001faa:	7ffb      	ldrb	r3, [r7, #31]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d105      	bne.n	8001fbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb0:	4b78      	ldr	r3, [pc, #480]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb4:	4a77      	ldr	r2, [pc, #476]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d03c      	beq.n	8002042 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01c      	beq.n	800200a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fd0:	4b70      	ldr	r3, [pc, #448]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001fd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fd6:	4a6f      	ldr	r2, [pc, #444]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe0:	f7ff fa10 	bl	8001404 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fe8:	f7ff fa0c 	bl	8001404 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e11c      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ffa:	4b66      	ldr	r3, [pc, #408]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001ffc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0ef      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x5cc>
 8002008:	e01b      	b.n	8002042 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800200a:	4b62      	ldr	r3, [pc, #392]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 800200c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002010:	4a60      	ldr	r2, [pc, #384]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201a:	f7ff f9f3 	bl	8001404 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002022:	f7ff f9ef 	bl	8001404 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e0ff      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002034:	4b57      	ldr	r3, [pc, #348]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8002036:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1ef      	bne.n	8002022 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80f3 	beq.w	8002232 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	2b02      	cmp	r3, #2
 8002052:	f040 80c9 	bne.w	80021e8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002056:	4b4f      	ldr	r3, [pc, #316]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 0203 	and.w	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002066:	429a      	cmp	r2, r3
 8002068:	d12c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	3b01      	subs	r3, #1
 8002076:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d123      	bne.n	80020c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002086:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d11b      	bne.n	80020c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002096:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d113      	bne.n	80020c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a6:	085b      	lsrs	r3, r3, #1
 80020a8:	3b01      	subs	r3, #1
 80020aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d109      	bne.n	80020c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	085b      	lsrs	r3, r3, #1
 80020bc:	3b01      	subs	r3, #1
 80020be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d06b      	beq.n	800219c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	2b0c      	cmp	r3, #12
 80020c8:	d062      	beq.n	8002190 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020ca:	4b32      	ldr	r3, [pc, #200]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0ac      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020da:	4b2e      	ldr	r3, [pc, #184]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a2d      	ldr	r2, [pc, #180]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 80020e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020e6:	f7ff f98d 	bl	8001404 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ee:	f7ff f989 	bl	8001404 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e099      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002100:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f0      	bne.n	80020ee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800210c:	4b21      	ldr	r3, [pc, #132]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	4b21      	ldr	r3, [pc, #132]	; (8002198 <HAL_RCC_OscConfig+0x77c>)
 8002112:	4013      	ands	r3, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800211c:	3a01      	subs	r2, #1
 800211e:	0112      	lsls	r2, r2, #4
 8002120:	4311      	orrs	r1, r2
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002126:	0212      	lsls	r2, r2, #8
 8002128:	4311      	orrs	r1, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800212e:	0852      	lsrs	r2, r2, #1
 8002130:	3a01      	subs	r2, #1
 8002132:	0552      	lsls	r2, r2, #21
 8002134:	4311      	orrs	r1, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800213a:	0852      	lsrs	r2, r2, #1
 800213c:	3a01      	subs	r2, #1
 800213e:	0652      	lsls	r2, r2, #25
 8002140:	4311      	orrs	r1, r2
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002146:	06d2      	lsls	r2, r2, #27
 8002148:	430a      	orrs	r2, r1
 800214a:	4912      	ldr	r1, [pc, #72]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 800214c:	4313      	orrs	r3, r2
 800214e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002150:	4b10      	ldr	r3, [pc, #64]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0f      	ldr	r2, [pc, #60]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8002156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800215a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800215c:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a0c      	ldr	r2, [pc, #48]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8002162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002166:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002168:	f7ff f94c 	bl	8001404 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002170:	f7ff f948 	bl	8001404 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e058      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800218e:	e050      	b.n	8002232 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e04f      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
 8002194:	40021000 	.word	0x40021000
 8002198:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <HAL_RCC_OscConfig+0x820>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d144      	bne.n	8002232 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021a8:	4b24      	ldr	r3, [pc, #144]	; (800223c <HAL_RCC_OscConfig+0x820>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a23      	ldr	r2, [pc, #140]	; (800223c <HAL_RCC_OscConfig+0x820>)
 80021ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021b4:	4b21      	ldr	r3, [pc, #132]	; (800223c <HAL_RCC_OscConfig+0x820>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4a20      	ldr	r2, [pc, #128]	; (800223c <HAL_RCC_OscConfig+0x820>)
 80021ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021c0:	f7ff f920 	bl	8001404 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c8:	f7ff f91c 	bl	8001404 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e02c      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021da:	4b18      	ldr	r3, [pc, #96]	; (800223c <HAL_RCC_OscConfig+0x820>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0x7ac>
 80021e6:	e024      	b.n	8002232 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2b0c      	cmp	r3, #12
 80021ec:	d01f      	beq.n	800222e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <HAL_RCC_OscConfig+0x820>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a12      	ldr	r2, [pc, #72]	; (800223c <HAL_RCC_OscConfig+0x820>)
 80021f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7ff f903 	bl	8001404 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002202:	f7ff f8ff 	bl	8001404 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e00f      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_RCC_OscConfig+0x820>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_RCC_OscConfig+0x820>)
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	4905      	ldr	r1, [pc, #20]	; (800223c <HAL_RCC_OscConfig+0x820>)
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_RCC_OscConfig+0x824>)
 8002228:	4013      	ands	r3, r2
 800222a:	60cb      	str	r3, [r1, #12]
 800222c:	e001      	b.n	8002232 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3720      	adds	r7, #32
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	feeefffc 	.word	0xfeeefffc

08002244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0e7      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002258:	4b75      	ldr	r3, [pc, #468]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d910      	bls.n	8002288 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	4b72      	ldr	r3, [pc, #456]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 0207 	bic.w	r2, r3, #7
 800226e:	4970      	ldr	r1, [pc, #448]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002276:	4b6e      	ldr	r3, [pc, #440]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0cf      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d010      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	4b66      	ldr	r3, [pc, #408]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d908      	bls.n	80022b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a4:	4b63      	ldr	r3, [pc, #396]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4960      	ldr	r1, [pc, #384]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d04c      	beq.n	800235c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ca:	4b5a      	ldr	r3, [pc, #360]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d121      	bne.n	800231a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0a6      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e2:	4b54      	ldr	r3, [pc, #336]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d115      	bne.n	800231a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e09a      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022fa:	4b4e      	ldr	r3, [pc, #312]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e08e      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800230a:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e086      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800231a:	4b46      	ldr	r3, [pc, #280]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f023 0203 	bic.w	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4943      	ldr	r1, [pc, #268]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800232c:	f7ff f86a 	bl	8001404 <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	e00a      	b.n	800234a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002334:	f7ff f866 	bl	8001404 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e06e      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	4b3a      	ldr	r3, [pc, #232]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 020c 	and.w	r2, r3, #12
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	429a      	cmp	r2, r3
 800235a:	d1eb      	bne.n	8002334 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d010      	beq.n	800238a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	4b31      	ldr	r3, [pc, #196]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002374:	429a      	cmp	r2, r3
 8002376:	d208      	bcs.n	800238a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002378:	4b2e      	ldr	r3, [pc, #184]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	492b      	ldr	r1, [pc, #172]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800238a:	4b29      	ldr	r3, [pc, #164]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d210      	bcs.n	80023ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002398:	4b25      	ldr	r3, [pc, #148]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 0207 	bic.w	r2, r3, #7
 80023a0:	4923      	ldr	r1, [pc, #140]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a8:	4b21      	ldr	r3, [pc, #132]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e036      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c6:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	4918      	ldr	r1, [pc, #96]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d009      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4910      	ldr	r1, [pc, #64]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023f8:	f000 f824 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	091b      	lsrs	r3, r3, #4
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	490b      	ldr	r1, [pc, #44]	; (8002438 <HAL_RCC_ClockConfig+0x1f4>)
 800240a:	5ccb      	ldrb	r3, [r1, r3]
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
 8002414:	4a09      	ldr	r2, [pc, #36]	; (800243c <HAL_RCC_ClockConfig+0x1f8>)
 8002416:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_RCC_ClockConfig+0x1fc>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe ffa1 	bl	8001364 <HAL_InitTick>
 8002422:	4603      	mov	r3, r0
 8002424:	72fb      	strb	r3, [r7, #11]

  return status;
 8002426:	7afb      	ldrb	r3, [r7, #11]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40022000 	.word	0x40022000
 8002434:	40021000 	.word	0x40021000
 8002438:	08004910 	.word	0x08004910
 800243c:	20000000 	.word	0x20000000
 8002440:	20000004 	.word	0x20000004

08002444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002452:	4b3e      	ldr	r3, [pc, #248]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800245c:	4b3b      	ldr	r3, [pc, #236]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_GetSysClockFreq+0x34>
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	2b0c      	cmp	r3, #12
 8002470:	d121      	bne.n	80024b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d11e      	bne.n	80024b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002478:	4b34      	ldr	r3, [pc, #208]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d107      	bne.n	8002494 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002484:	4b31      	ldr	r3, [pc, #196]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248a:	0a1b      	lsrs	r3, r3, #8
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	e005      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002494:	4b2d      	ldr	r3, [pc, #180]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024a0:	4a2b      	ldr	r2, [pc, #172]	; (8002550 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10d      	bne.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d102      	bne.n	80024c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024bc:	4b25      	ldr	r3, [pc, #148]	; (8002554 <HAL_RCC_GetSysClockFreq+0x110>)
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	e004      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024c8:	4b23      	ldr	r3, [pc, #140]	; (8002558 <HAL_RCC_GetSysClockFreq+0x114>)
 80024ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	d134      	bne.n	800253c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024d2:	4b1e      	ldr	r3, [pc, #120]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d003      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0xa6>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d003      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0xac>
 80024e8:	e005      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024ea:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ec:	617b      	str	r3, [r7, #20]
      break;
 80024ee:	e005      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_RCC_GetSysClockFreq+0x114>)
 80024f2:	617b      	str	r3, [r7, #20]
      break;
 80024f4:	e002      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	617b      	str	r3, [r7, #20]
      break;
 80024fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	3301      	adds	r3, #1
 8002508:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	fb03 f202 	mul.w	r2, r3, r2
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	0e5b      	lsrs	r3, r3, #25
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	3301      	adds	r3, #1
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800253c:	69bb      	ldr	r3, [r7, #24]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3724      	adds	r7, #36	; 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	08004928 	.word	0x08004928
 8002554:	00f42400 	.word	0x00f42400
 8002558:	007a1200 	.word	0x007a1200

0800255c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <HAL_RCC_GetHCLKFreq+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000000 	.word	0x20000000

08002574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002578:	f7ff fff0 	bl	800255c <HAL_RCC_GetHCLKFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	4904      	ldr	r1, [pc, #16]	; (800259c <HAL_RCC_GetPCLK1Freq+0x28>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	08004920 	.word	0x08004920

080025a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025a4:	f7ff ffda 	bl	800255c <HAL_RCC_GetHCLKFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	0adb      	lsrs	r3, r3, #11
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4904      	ldr	r1, [pc, #16]	; (80025c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	08004920 	.word	0x08004920

080025cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025d4:	2300      	movs	r3, #0
 80025d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025d8:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025e4:	f7ff f9b6 	bl	8001954 <HAL_PWREx_GetVoltageRange>
 80025e8:	6178      	str	r0, [r7, #20]
 80025ea:	e014      	b.n	8002616 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025ec:	4b25      	ldr	r3, [pc, #148]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	4a24      	ldr	r2, [pc, #144]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f6:	6593      	str	r3, [r2, #88]	; 0x58
 80025f8:	4b22      	ldr	r3, [pc, #136]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002604:	f7ff f9a6 	bl	8001954 <HAL_PWREx_GetVoltageRange>
 8002608:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800260a:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260e:	4a1d      	ldr	r2, [pc, #116]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002614:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800261c:	d10b      	bne.n	8002636 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b80      	cmp	r3, #128	; 0x80
 8002622:	d919      	bls.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2ba0      	cmp	r3, #160	; 0xa0
 8002628:	d902      	bls.n	8002630 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800262a:	2302      	movs	r3, #2
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	e013      	b.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002630:	2301      	movs	r3, #1
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	e010      	b.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b80      	cmp	r3, #128	; 0x80
 800263a:	d902      	bls.n	8002642 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800263c:	2303      	movs	r3, #3
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	e00a      	b.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b80      	cmp	r3, #128	; 0x80
 8002646:	d102      	bne.n	800264e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002648:	2302      	movs	r3, #2
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	e004      	b.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b70      	cmp	r3, #112	; 0x70
 8002652:	d101      	bne.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002654:	2301      	movs	r3, #1
 8002656:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 0207 	bic.w	r2, r3, #7
 8002660:	4909      	ldr	r1, [pc, #36]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	429a      	cmp	r2, r3
 8002674:	d001      	beq.n	800267a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000
 8002688:	40022000 	.word	0x40022000

0800268c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002694:	2300      	movs	r3, #0
 8002696:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002698:	2300      	movs	r3, #0
 800269a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d031      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026b0:	d01a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80026b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026b6:	d814      	bhi.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d009      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026c0:	d10f      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80026c2:	4b5d      	ldr	r3, [pc, #372]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	4a5c      	ldr	r2, [pc, #368]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ce:	e00c      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3304      	adds	r3, #4
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f9de 	bl	8002a98 <RCCEx_PLLSAI1_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026e0:	e003      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	74fb      	strb	r3, [r7, #19]
      break;
 80026e6:	e000      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80026e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ea:	7cfb      	ldrb	r3, [r7, #19]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10b      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026f0:	4b51      	ldr	r3, [pc, #324]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fe:	494e      	ldr	r1, [pc, #312]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002706:	e001      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 809e 	beq.w	8002856 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800271e:	4b46      	ldr	r3, [pc, #280]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800272e:	2300      	movs	r3, #0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00d      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002734:	4b40      	ldr	r3, [pc, #256]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002738:	4a3f      	ldr	r2, [pc, #252]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800273a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273e:	6593      	str	r3, [r2, #88]	; 0x58
 8002740:	4b3d      	ldr	r3, [pc, #244]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274c:	2301      	movs	r3, #1
 800274e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002750:	4b3a      	ldr	r3, [pc, #232]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a39      	ldr	r2, [pc, #228]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800275c:	f7fe fe52 	bl	8001404 <HAL_GetTick>
 8002760:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002762:	e009      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002764:	f7fe fe4e 	bl	8001404 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d902      	bls.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	74fb      	strb	r3, [r7, #19]
        break;
 8002776:	e005      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002778:	4b30      	ldr	r3, [pc, #192]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ef      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002784:	7cfb      	ldrb	r3, [r7, #19]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d15a      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800278a:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002794:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d01e      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d019      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027a6:	4b24      	ldr	r3, [pc, #144]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027b2:	4b21      	ldr	r3, [pc, #132]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b8:	4a1f      	ldr	r2, [pc, #124]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027c2:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c8:	4a1b      	ldr	r2, [pc, #108]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027d2:	4a19      	ldr	r2, [pc, #100]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d016      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe fe0e 	bl	8001404 <HAL_GetTick>
 80027e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ea:	e00b      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ec:	f7fe fe0a 	bl	8001404 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d902      	bls.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	74fb      	strb	r3, [r7, #19]
            break;
 8002802:	e006      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0ec      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002812:	7cfb      	ldrb	r3, [r7, #19]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10b      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002818:	4b07      	ldr	r3, [pc, #28]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002826:	4904      	ldr	r1, [pc, #16]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800282e:	e009      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	74bb      	strb	r3, [r7, #18]
 8002834:	e006      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002840:	7cfb      	ldrb	r3, [r7, #19]
 8002842:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002844:	7c7b      	ldrb	r3, [r7, #17]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d105      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284a:	4b8a      	ldr	r3, [pc, #552]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284e:	4a89      	ldr	r2, [pc, #548]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002854:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002862:	4b84      	ldr	r3, [pc, #528]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002868:	f023 0203 	bic.w	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	4980      	ldr	r1, [pc, #512]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002884:	4b7b      	ldr	r3, [pc, #492]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288a:	f023 020c 	bic.w	r2, r3, #12
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	4978      	ldr	r1, [pc, #480]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028a6:	4b73      	ldr	r3, [pc, #460]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	496f      	ldr	r1, [pc, #444]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028c8:	4b6a      	ldr	r3, [pc, #424]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d6:	4967      	ldr	r1, [pc, #412]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028ea:	4b62      	ldr	r3, [pc, #392]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	495e      	ldr	r1, [pc, #376]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800290c:	4b59      	ldr	r3, [pc, #356]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	4956      	ldr	r1, [pc, #344]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800292e:	4b51      	ldr	r3, [pc, #324]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002934:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	494d      	ldr	r1, [pc, #308]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d028      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002950:	4b48      	ldr	r3, [pc, #288]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4945      	ldr	r1, [pc, #276]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800296e:	d106      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002970:	4b40      	ldr	r3, [pc, #256]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a3f      	ldr	r2, [pc, #252]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800297a:	60d3      	str	r3, [r2, #12]
 800297c:	e011      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002986:	d10c      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3304      	adds	r3, #4
 800298c:	2101      	movs	r1, #1
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f882 	bl	8002a98 <RCCEx_PLLSAI1_Config>
 8002994:	4603      	mov	r3, r0
 8002996:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800299e:	7cfb      	ldrb	r3, [r7, #19]
 80029a0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d028      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029ae:	4b31      	ldr	r3, [pc, #196]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	492d      	ldr	r1, [pc, #180]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029cc:	d106      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ce:	4b29      	ldr	r3, [pc, #164]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	4a28      	ldr	r2, [pc, #160]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029d8:	60d3      	str	r3, [r2, #12]
 80029da:	e011      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3304      	adds	r3, #4
 80029ea:	2101      	movs	r1, #1
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 f853 	bl	8002a98 <RCCEx_PLLSAI1_Config>
 80029f2:	4603      	mov	r3, r0
 80029f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029f6:	7cfb      	ldrb	r3, [r7, #19]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01c      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a0c:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1a:	4916      	ldr	r1, [pc, #88]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a2a:	d10c      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	2102      	movs	r1, #2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f830 	bl	8002a98 <RCCEx_PLLSAI1_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002a42:	7cfb      	ldrb	r3, [r7, #19]
 8002a44:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a60:	4904      	ldr	r1, [pc, #16]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a68:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000

08002a78 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a04      	ldr	r2, [pc, #16]	; (8002a94 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a82:	f043 0304 	orr.w	r3, r3, #4
 8002a86:	6013      	str	r3, [r2, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000

08002a98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aa6:	4b74      	ldr	r3, [pc, #464]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d018      	beq.n	8002ae4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ab2:	4b71      	ldr	r3, [pc, #452]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f003 0203 	and.w	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d10d      	bne.n	8002ade <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002aca:	4b6b      	ldr	r3, [pc, #428]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
       ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d047      	beq.n	8002b6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	73fb      	strb	r3, [r7, #15]
 8002ae2:	e044      	b.n	8002b6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d018      	beq.n	8002b1e <RCCEx_PLLSAI1_Config+0x86>
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d825      	bhi.n	8002b3c <RCCEx_PLLSAI1_Config+0xa4>
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d002      	beq.n	8002afa <RCCEx_PLLSAI1_Config+0x62>
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d009      	beq.n	8002b0c <RCCEx_PLLSAI1_Config+0x74>
 8002af8:	e020      	b.n	8002b3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002afa:	4b5f      	ldr	r3, [pc, #380]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d11d      	bne.n	8002b42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b0a:	e01a      	b.n	8002b42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b0c:	4b5a      	ldr	r3, [pc, #360]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d116      	bne.n	8002b46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1c:	e013      	b.n	8002b46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b1e:	4b56      	ldr	r3, [pc, #344]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10f      	bne.n	8002b4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b2a:	4b53      	ldr	r3, [pc, #332]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b3a:	e006      	b.n	8002b4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b40:	e004      	b.n	8002b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b42:	bf00      	nop
 8002b44:	e002      	b.n	8002b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b46:	bf00      	nop
 8002b48:	e000      	b.n	8002b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10d      	bne.n	8002b6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b52:	4b49      	ldr	r3, [pc, #292]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6819      	ldr	r1, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	430b      	orrs	r3, r1
 8002b68:	4943      	ldr	r1, [pc, #268]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d17c      	bne.n	8002c6e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b74:	4b40      	ldr	r3, [pc, #256]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a3f      	ldr	r2, [pc, #252]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b80:	f7fe fc40 	bl	8001404 <HAL_GetTick>
 8002b84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b86:	e009      	b.n	8002b9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b88:	f7fe fc3c 	bl	8001404 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d902      	bls.n	8002b9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	73fb      	strb	r3, [r7, #15]
        break;
 8002b9a:	e005      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b9c:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1ef      	bne.n	8002b88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d15f      	bne.n	8002c6e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d110      	bne.n	8002bd6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bb4:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002bbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6892      	ldr	r2, [r2, #8]
 8002bc4:	0211      	lsls	r1, r2, #8
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68d2      	ldr	r2, [r2, #12]
 8002bca:	06d2      	lsls	r2, r2, #27
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	492a      	ldr	r1, [pc, #168]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	610b      	str	r3, [r1, #16]
 8002bd4:	e027      	b.n	8002c26 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d112      	bne.n	8002c02 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bdc:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002be4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6892      	ldr	r2, [r2, #8]
 8002bec:	0211      	lsls	r1, r2, #8
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6912      	ldr	r2, [r2, #16]
 8002bf2:	0852      	lsrs	r2, r2, #1
 8002bf4:	3a01      	subs	r2, #1
 8002bf6:	0552      	lsls	r2, r2, #21
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	491f      	ldr	r1, [pc, #124]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	610b      	str	r3, [r1, #16]
 8002c00:	e011      	b.n	8002c26 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c02:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6892      	ldr	r2, [r2, #8]
 8002c12:	0211      	lsls	r1, r2, #8
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6952      	ldr	r2, [r2, #20]
 8002c18:	0852      	lsrs	r2, r2, #1
 8002c1a:	3a01      	subs	r2, #1
 8002c1c:	0652      	lsls	r2, r2, #25
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	4915      	ldr	r1, [pc, #84]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c26:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c32:	f7fe fbe7 	bl	8001404 <HAL_GetTick>
 8002c36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c38:	e009      	b.n	8002c4e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c3a:	f7fe fbe3 	bl	8001404 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d902      	bls.n	8002c4e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	73fb      	strb	r3, [r7, #15]
          break;
 8002c4c:	e005      	b.n	8002c5a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0ef      	beq.n	8002c3a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d106      	bne.n	8002c6e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	4903      	ldr	r1, [pc, #12]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000

08002c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e049      	b.n	8002d22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fe fa10 	bl	80010c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	f000 fb52 	bl	8003364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e049      	b.n	8002dd0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d106      	bne.n	8002d56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f841 	bl	8002dd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3304      	adds	r3, #4
 8002d66:	4619      	mov	r1, r3
 8002d68:	4610      	mov	r0, r2
 8002d6a:	f000 fafb 	bl	8003364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d109      	bne.n	8002e10 <HAL_TIM_PWM_Start+0x24>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	bf14      	ite	ne
 8002e08:	2301      	movne	r3, #1
 8002e0a:	2300      	moveq	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e03c      	b.n	8002e8a <HAL_TIM_PWM_Start+0x9e>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d109      	bne.n	8002e2a <HAL_TIM_PWM_Start+0x3e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	bf14      	ite	ne
 8002e22:	2301      	movne	r3, #1
 8002e24:	2300      	moveq	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	e02f      	b.n	8002e8a <HAL_TIM_PWM_Start+0x9e>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d109      	bne.n	8002e44 <HAL_TIM_PWM_Start+0x58>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	bf14      	ite	ne
 8002e3c:	2301      	movne	r3, #1
 8002e3e:	2300      	moveq	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	e022      	b.n	8002e8a <HAL_TIM_PWM_Start+0x9e>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	d109      	bne.n	8002e5e <HAL_TIM_PWM_Start+0x72>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	bf14      	ite	ne
 8002e56:	2301      	movne	r3, #1
 8002e58:	2300      	moveq	r3, #0
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	e015      	b.n	8002e8a <HAL_TIM_PWM_Start+0x9e>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b10      	cmp	r3, #16
 8002e62:	d109      	bne.n	8002e78 <HAL_TIM_PWM_Start+0x8c>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	bf14      	ite	ne
 8002e70:	2301      	movne	r3, #1
 8002e72:	2300      	moveq	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e008      	b.n	8002e8a <HAL_TIM_PWM_Start+0x9e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e07e      	b.n	8002f90 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d104      	bne.n	8002ea2 <HAL_TIM_PWM_Start+0xb6>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea0:	e023      	b.n	8002eea <HAL_TIM_PWM_Start+0xfe>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d104      	bne.n	8002eb2 <HAL_TIM_PWM_Start+0xc6>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb0:	e01b      	b.n	8002eea <HAL_TIM_PWM_Start+0xfe>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d104      	bne.n	8002ec2 <HAL_TIM_PWM_Start+0xd6>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ec0:	e013      	b.n	8002eea <HAL_TIM_PWM_Start+0xfe>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b0c      	cmp	r3, #12
 8002ec6:	d104      	bne.n	8002ed2 <HAL_TIM_PWM_Start+0xe6>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ed0:	e00b      	b.n	8002eea <HAL_TIM_PWM_Start+0xfe>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b10      	cmp	r3, #16
 8002ed6:	d104      	bne.n	8002ee2 <HAL_TIM_PWM_Start+0xf6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ee0:	e003      	b.n	8002eea <HAL_TIM_PWM_Start+0xfe>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	6839      	ldr	r1, [r7, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fdb2 	bl	8003a5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a26      	ldr	r2, [pc, #152]	; (8002f98 <HAL_TIM_PWM_Start+0x1ac>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d009      	beq.n	8002f16 <HAL_TIM_PWM_Start+0x12a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a25      	ldr	r2, [pc, #148]	; (8002f9c <HAL_TIM_PWM_Start+0x1b0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d004      	beq.n	8002f16 <HAL_TIM_PWM_Start+0x12a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a23      	ldr	r2, [pc, #140]	; (8002fa0 <HAL_TIM_PWM_Start+0x1b4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d101      	bne.n	8002f1a <HAL_TIM_PWM_Start+0x12e>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <HAL_TIM_PWM_Start+0x130>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d007      	beq.n	8002f30 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a18      	ldr	r2, [pc, #96]	; (8002f98 <HAL_TIM_PWM_Start+0x1ac>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d009      	beq.n	8002f4e <HAL_TIM_PWM_Start+0x162>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f42:	d004      	beq.n	8002f4e <HAL_TIM_PWM_Start+0x162>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <HAL_TIM_PWM_Start+0x1b0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d115      	bne.n	8002f7a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <HAL_TIM_PWM_Start+0x1b8>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b06      	cmp	r3, #6
 8002f5e:	d015      	beq.n	8002f8c <HAL_TIM_PWM_Start+0x1a0>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f66:	d011      	beq.n	8002f8c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f78:	e008      	b.n	8002f8c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0201 	orr.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	e000      	b.n	8002f8e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40012c00 	.word	0x40012c00
 8002f9c:	40014000 	.word	0x40014000
 8002fa0:	40014400 	.word	0x40014400
 8002fa4:	00010007 	.word	0x00010007

08002fa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e0ff      	b.n	80031c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b14      	cmp	r3, #20
 8002fd2:	f200 80f0 	bhi.w	80031b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002fd6:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fdc:	08003031 	.word	0x08003031
 8002fe0:	080031b7 	.word	0x080031b7
 8002fe4:	080031b7 	.word	0x080031b7
 8002fe8:	080031b7 	.word	0x080031b7
 8002fec:	08003071 	.word	0x08003071
 8002ff0:	080031b7 	.word	0x080031b7
 8002ff4:	080031b7 	.word	0x080031b7
 8002ff8:	080031b7 	.word	0x080031b7
 8002ffc:	080030b3 	.word	0x080030b3
 8003000:	080031b7 	.word	0x080031b7
 8003004:	080031b7 	.word	0x080031b7
 8003008:	080031b7 	.word	0x080031b7
 800300c:	080030f3 	.word	0x080030f3
 8003010:	080031b7 	.word	0x080031b7
 8003014:	080031b7 	.word	0x080031b7
 8003018:	080031b7 	.word	0x080031b7
 800301c:	08003135 	.word	0x08003135
 8003020:	080031b7 	.word	0x080031b7
 8003024:	080031b7 	.word	0x080031b7
 8003028:	080031b7 	.word	0x080031b7
 800302c:	08003175 	.word	0x08003175
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	4618      	mov	r0, r3
 8003038:	f000 f9f8 	bl	800342c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0208 	orr.w	r2, r2, #8
 800304a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0204 	bic.w	r2, r2, #4
 800305a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6999      	ldr	r1, [r3, #24]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	619a      	str	r2, [r3, #24]
      break;
 800306e:	e0a5      	b.n	80031bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fa54 	bl	8003524 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800308a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800309a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6999      	ldr	r1, [r3, #24]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	021a      	lsls	r2, r3, #8
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	619a      	str	r2, [r3, #24]
      break;
 80030b0:	e084      	b.n	80031bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68b9      	ldr	r1, [r7, #8]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 faad 	bl	8003618 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69da      	ldr	r2, [r3, #28]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0208 	orr.w	r2, r2, #8
 80030cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	69da      	ldr	r2, [r3, #28]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0204 	bic.w	r2, r2, #4
 80030dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69d9      	ldr	r1, [r3, #28]
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	61da      	str	r2, [r3, #28]
      break;
 80030f0:	e064      	b.n	80031bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fb05 	bl	8003708 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800310c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69da      	ldr	r2, [r3, #28]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69d9      	ldr	r1, [r3, #28]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	021a      	lsls	r2, r3, #8
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	61da      	str	r2, [r3, #28]
      break;
 8003132:	e043      	b.n	80031bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fb42 	bl	80037c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0208 	orr.w	r2, r2, #8
 800314e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0204 	bic.w	r2, r2, #4
 800315e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003172:	e023      	b.n	80031bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fb7a 	bl	8003874 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800318e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	021a      	lsls	r2, r3, #8
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80031b4:	e002      	b.n	80031bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
      break;
 80031ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop

080031d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_TIM_ConfigClockSource+0x1c>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e0b6      	b.n	800335a <HAL_TIM_ConfigClockSource+0x18a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800320a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800320e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003216:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003228:	d03e      	beq.n	80032a8 <HAL_TIM_ConfigClockSource+0xd8>
 800322a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800322e:	f200 8087 	bhi.w	8003340 <HAL_TIM_ConfigClockSource+0x170>
 8003232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003236:	f000 8086 	beq.w	8003346 <HAL_TIM_ConfigClockSource+0x176>
 800323a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323e:	d87f      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x170>
 8003240:	2b70      	cmp	r3, #112	; 0x70
 8003242:	d01a      	beq.n	800327a <HAL_TIM_ConfigClockSource+0xaa>
 8003244:	2b70      	cmp	r3, #112	; 0x70
 8003246:	d87b      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x170>
 8003248:	2b60      	cmp	r3, #96	; 0x60
 800324a:	d050      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0x11e>
 800324c:	2b60      	cmp	r3, #96	; 0x60
 800324e:	d877      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x170>
 8003250:	2b50      	cmp	r3, #80	; 0x50
 8003252:	d03c      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0xfe>
 8003254:	2b50      	cmp	r3, #80	; 0x50
 8003256:	d873      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x170>
 8003258:	2b40      	cmp	r3, #64	; 0x40
 800325a:	d058      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x13e>
 800325c:	2b40      	cmp	r3, #64	; 0x40
 800325e:	d86f      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x170>
 8003260:	2b30      	cmp	r3, #48	; 0x30
 8003262:	d064      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x15e>
 8003264:	2b30      	cmp	r3, #48	; 0x30
 8003266:	d86b      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x170>
 8003268:	2b20      	cmp	r3, #32
 800326a:	d060      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x15e>
 800326c:	2b20      	cmp	r3, #32
 800326e:	d867      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x170>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d05c      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x15e>
 8003274:	2b10      	cmp	r3, #16
 8003276:	d05a      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x15e>
 8003278:	e062      	b.n	8003340 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6899      	ldr	r1, [r3, #8]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f000 fbc7 	bl	8003a1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800329c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	609a      	str	r2, [r3, #8]
      break;
 80032a6:	e04f      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6899      	ldr	r1, [r3, #8]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f000 fbb0 	bl	8003a1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ca:	609a      	str	r2, [r3, #8]
      break;
 80032cc:	e03c      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6859      	ldr	r1, [r3, #4]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	461a      	mov	r2, r3
 80032dc:	f000 fb24 	bl	8003928 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2150      	movs	r1, #80	; 0x50
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fb7d 	bl	80039e6 <TIM_ITRx_SetConfig>
      break;
 80032ec:	e02c      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6859      	ldr	r1, [r3, #4]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	461a      	mov	r2, r3
 80032fc:	f000 fb43 	bl	8003986 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2160      	movs	r1, #96	; 0x60
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fb6d 	bl	80039e6 <TIM_ITRx_SetConfig>
      break;
 800330c:	e01c      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6859      	ldr	r1, [r3, #4]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	461a      	mov	r2, r3
 800331c:	f000 fb04 	bl	8003928 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2140      	movs	r1, #64	; 0x40
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fb5d 	bl	80039e6 <TIM_ITRx_SetConfig>
      break;
 800332c:	e00c      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4619      	mov	r1, r3
 8003338:	4610      	mov	r0, r2
 800333a:	f000 fb54 	bl	80039e6 <TIM_ITRx_SetConfig>
      break;
 800333e:	e003      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
      break;
 8003344:	e000      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003346:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003358:	7bfb      	ldrb	r3, [r7, #15]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a2a      	ldr	r2, [pc, #168]	; (8003420 <TIM_Base_SetConfig+0xbc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d003      	beq.n	8003384 <TIM_Base_SetConfig+0x20>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003382:	d108      	bne.n	8003396 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a21      	ldr	r2, [pc, #132]	; (8003420 <TIM_Base_SetConfig+0xbc>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00b      	beq.n	80033b6 <TIM_Base_SetConfig+0x52>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a4:	d007      	beq.n	80033b6 <TIM_Base_SetConfig+0x52>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a1e      	ldr	r2, [pc, #120]	; (8003424 <TIM_Base_SetConfig+0xc0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d003      	beq.n	80033b6 <TIM_Base_SetConfig+0x52>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a1d      	ldr	r2, [pc, #116]	; (8003428 <TIM_Base_SetConfig+0xc4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d108      	bne.n	80033c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a0c      	ldr	r2, [pc, #48]	; (8003420 <TIM_Base_SetConfig+0xbc>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d007      	beq.n	8003404 <TIM_Base_SetConfig+0xa0>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a0b      	ldr	r2, [pc, #44]	; (8003424 <TIM_Base_SetConfig+0xc0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d003      	beq.n	8003404 <TIM_Base_SetConfig+0xa0>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <TIM_Base_SetConfig+0xc4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d103      	bne.n	800340c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	615a      	str	r2, [r3, #20]
}
 8003412:	bf00      	nop
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40012c00 	.word	0x40012c00
 8003424:	40014000 	.word	0x40014000
 8003428:	40014400 	.word	0x40014400

0800342c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f023 0201 	bic.w	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0303 	bic.w	r3, r3, #3
 8003466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f023 0302 	bic.w	r3, r3, #2
 8003478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a24      	ldr	r2, [pc, #144]	; (8003518 <TIM_OC1_SetConfig+0xec>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d007      	beq.n	800349c <TIM_OC1_SetConfig+0x70>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a23      	ldr	r2, [pc, #140]	; (800351c <TIM_OC1_SetConfig+0xf0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d003      	beq.n	800349c <TIM_OC1_SetConfig+0x70>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a22      	ldr	r2, [pc, #136]	; (8003520 <TIM_OC1_SetConfig+0xf4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d10c      	bne.n	80034b6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f023 0308 	bic.w	r3, r3, #8
 80034a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f023 0304 	bic.w	r3, r3, #4
 80034b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a17      	ldr	r2, [pc, #92]	; (8003518 <TIM_OC1_SetConfig+0xec>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d007      	beq.n	80034ce <TIM_OC1_SetConfig+0xa2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a16      	ldr	r2, [pc, #88]	; (800351c <TIM_OC1_SetConfig+0xf0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d003      	beq.n	80034ce <TIM_OC1_SetConfig+0xa2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a15      	ldr	r2, [pc, #84]	; (8003520 <TIM_OC1_SetConfig+0xf4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d111      	bne.n	80034f2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	621a      	str	r2, [r3, #32]
}
 800350c:	bf00      	nop
 800350e:	371c      	adds	r7, #28
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	40012c00 	.word	0x40012c00
 800351c:	40014000 	.word	0x40014000
 8003520:	40014400 	.word	0x40014400

08003524 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	f023 0210 	bic.w	r2, r3, #16
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800355e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f023 0320 	bic.w	r3, r3, #32
 8003572:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a22      	ldr	r2, [pc, #136]	; (800360c <TIM_OC2_SetConfig+0xe8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d10d      	bne.n	80035a4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800358e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a19      	ldr	r2, [pc, #100]	; (800360c <TIM_OC2_SetConfig+0xe8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d007      	beq.n	80035bc <TIM_OC2_SetConfig+0x98>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a18      	ldr	r2, [pc, #96]	; (8003610 <TIM_OC2_SetConfig+0xec>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <TIM_OC2_SetConfig+0x98>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a17      	ldr	r2, [pc, #92]	; (8003614 <TIM_OC2_SetConfig+0xf0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d113      	bne.n	80035e4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	621a      	str	r2, [r3, #32]
}
 80035fe:	bf00      	nop
 8003600:	371c      	adds	r7, #28
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40012c00 	.word	0x40012c00
 8003610:	40014000 	.word	0x40014000
 8003614:	40014400 	.word	0x40014400

08003618 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0303 	bic.w	r3, r3, #3
 8003652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	021b      	lsls	r3, r3, #8
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a21      	ldr	r2, [pc, #132]	; (80036fc <TIM_OC3_SetConfig+0xe4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d10d      	bne.n	8003696 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003680:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a18      	ldr	r2, [pc, #96]	; (80036fc <TIM_OC3_SetConfig+0xe4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d007      	beq.n	80036ae <TIM_OC3_SetConfig+0x96>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a17      	ldr	r2, [pc, #92]	; (8003700 <TIM_OC3_SetConfig+0xe8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d003      	beq.n	80036ae <TIM_OC3_SetConfig+0x96>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a16      	ldr	r2, [pc, #88]	; (8003704 <TIM_OC3_SetConfig+0xec>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d113      	bne.n	80036d6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	621a      	str	r2, [r3, #32]
}
 80036f0:	bf00      	nop
 80036f2:	371c      	adds	r7, #28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40014000 	.word	0x40014000
 8003704:	40014400 	.word	0x40014400

08003708 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800373a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	021b      	lsls	r3, r3, #8
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	031b      	lsls	r3, r3, #12
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <TIM_OC4_SetConfig+0xb0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d007      	beq.n	800377c <TIM_OC4_SetConfig+0x74>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a13      	ldr	r2, [pc, #76]	; (80037bc <TIM_OC4_SetConfig+0xb4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d003      	beq.n	800377c <TIM_OC4_SetConfig+0x74>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <TIM_OC4_SetConfig+0xb8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d109      	bne.n	8003790 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003782:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	019b      	lsls	r3, r3, #6
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	621a      	str	r2, [r3, #32]
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40012c00 	.word	0x40012c00
 80037bc:	40014000 	.word	0x40014000
 80037c0:	40014400 	.word	0x40014400

080037c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003808:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	041b      	lsls	r3, r3, #16
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a13      	ldr	r2, [pc, #76]	; (8003868 <TIM_OC5_SetConfig+0xa4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d007      	beq.n	800382e <TIM_OC5_SetConfig+0x6a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a12      	ldr	r2, [pc, #72]	; (800386c <TIM_OC5_SetConfig+0xa8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d003      	beq.n	800382e <TIM_OC5_SetConfig+0x6a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a11      	ldr	r2, [pc, #68]	; (8003870 <TIM_OC5_SetConfig+0xac>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d109      	bne.n	8003842 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003834:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	021b      	lsls	r3, r3, #8
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	4313      	orrs	r3, r2
 8003840:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	621a      	str	r2, [r3, #32]
}
 800385c:	bf00      	nop
 800385e:	371c      	adds	r7, #28
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	40012c00 	.word	0x40012c00
 800386c:	40014000 	.word	0x40014000
 8003870:	40014400 	.word	0x40014400

08003874 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	021b      	lsls	r3, r3, #8
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	051b      	lsls	r3, r3, #20
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a14      	ldr	r2, [pc, #80]	; (800391c <TIM_OC6_SetConfig+0xa8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d007      	beq.n	80038e0 <TIM_OC6_SetConfig+0x6c>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a13      	ldr	r2, [pc, #76]	; (8003920 <TIM_OC6_SetConfig+0xac>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d003      	beq.n	80038e0 <TIM_OC6_SetConfig+0x6c>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a12      	ldr	r2, [pc, #72]	; (8003924 <TIM_OC6_SetConfig+0xb0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d109      	bne.n	80038f4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	029b      	lsls	r3, r3, #10
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	621a      	str	r2, [r3, #32]
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40012c00 	.word	0x40012c00
 8003920:	40014000 	.word	0x40014000
 8003924:	40014400 	.word	0x40014400

08003928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	f023 0201 	bic.w	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f023 030a 	bic.w	r3, r3, #10
 8003964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	621a      	str	r2, [r3, #32]
}
 800397a:	bf00      	nop
 800397c:	371c      	adds	r7, #28
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003986:	b480      	push	{r7}
 8003988:	b087      	sub	sp, #28
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	f023 0210 	bic.w	r2, r3, #16
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	031b      	lsls	r3, r3, #12
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	621a      	str	r2, [r3, #32]
}
 80039da:	bf00      	nop
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b085      	sub	sp, #20
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
 80039ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f043 0307 	orr.w	r3, r3, #7
 8003a08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	609a      	str	r2, [r3, #8]
}
 8003a10:	bf00      	nop
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	021a      	lsls	r2, r3, #8
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	609a      	str	r2, [r3, #8]
}
 8003a50:	bf00      	nop
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	2201      	movs	r2, #1
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a1a      	ldr	r2, [r3, #32]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	401a      	ands	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a1a      	ldr	r2, [r3, #32]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f003 031f 	and.w	r3, r3, #31
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	fa01 f303 	lsl.w	r3, r1, r3
 8003a94:	431a      	orrs	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	621a      	str	r2, [r3, #32]
}
 8003a9a:	bf00      	nop
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e04f      	b.n	8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a21      	ldr	r2, [pc, #132]	; (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d108      	bne.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003af0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a14      	ldr	r2, [pc, #80]	; (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d009      	beq.n	8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b28:	d004      	beq.n	8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a10      	ldr	r2, [pc, #64]	; (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d10c      	bne.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	40012c00 	.word	0x40012c00
 8003b70:	40014000 	.word	0x40014000

08003b74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e040      	b.n	8003c08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d106      	bne.n	8003b9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fd fafc 	bl	8001194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2224      	movs	r2, #36	; 0x24
 8003ba0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f82c 	bl	8003c10 <UART_SetConfig>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e022      	b.n	8003c08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fa4c 	bl	8004068 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0201 	orr.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fad3 	bl	80041ac <UART_CheckIdleState>
 8003c06:	4603      	mov	r3, r0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c14:	b08a      	sub	sp, #40	; 0x28
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	4bb4      	ldr	r3, [pc, #720]	; (8003f10 <UART_SetConfig+0x300>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4aa9      	ldr	r2, [pc, #676]	; (8003f14 <UART_SetConfig+0x304>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d004      	beq.n	8003c7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4aa0      	ldr	r2, [pc, #640]	; (8003f18 <UART_SetConfig+0x308>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d126      	bne.n	8003ce8 <UART_SetConfig+0xd8>
 8003c9a:	4ba0      	ldr	r3, [pc, #640]	; (8003f1c <UART_SetConfig+0x30c>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d81b      	bhi.n	8003ce0 <UART_SetConfig+0xd0>
 8003ca8:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <UART_SetConfig+0xa0>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003cc1 	.word	0x08003cc1
 8003cb4:	08003cd1 	.word	0x08003cd1
 8003cb8:	08003cc9 	.word	0x08003cc9
 8003cbc:	08003cd9 	.word	0x08003cd9
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc6:	e080      	b.n	8003dca <UART_SetConfig+0x1ba>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cce:	e07c      	b.n	8003dca <UART_SetConfig+0x1ba>
 8003cd0:	2304      	movs	r3, #4
 8003cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd6:	e078      	b.n	8003dca <UART_SetConfig+0x1ba>
 8003cd8:	2308      	movs	r3, #8
 8003cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cde:	e074      	b.n	8003dca <UART_SetConfig+0x1ba>
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce6:	e070      	b.n	8003dca <UART_SetConfig+0x1ba>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a8c      	ldr	r2, [pc, #560]	; (8003f20 <UART_SetConfig+0x310>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d138      	bne.n	8003d64 <UART_SetConfig+0x154>
 8003cf2:	4b8a      	ldr	r3, [pc, #552]	; (8003f1c <UART_SetConfig+0x30c>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf8:	f003 030c 	and.w	r3, r3, #12
 8003cfc:	2b0c      	cmp	r3, #12
 8003cfe:	d82d      	bhi.n	8003d5c <UART_SetConfig+0x14c>
 8003d00:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <UART_SetConfig+0xf8>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d3d 	.word	0x08003d3d
 8003d0c:	08003d5d 	.word	0x08003d5d
 8003d10:	08003d5d 	.word	0x08003d5d
 8003d14:	08003d5d 	.word	0x08003d5d
 8003d18:	08003d4d 	.word	0x08003d4d
 8003d1c:	08003d5d 	.word	0x08003d5d
 8003d20:	08003d5d 	.word	0x08003d5d
 8003d24:	08003d5d 	.word	0x08003d5d
 8003d28:	08003d45 	.word	0x08003d45
 8003d2c:	08003d5d 	.word	0x08003d5d
 8003d30:	08003d5d 	.word	0x08003d5d
 8003d34:	08003d5d 	.word	0x08003d5d
 8003d38:	08003d55 	.word	0x08003d55
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d42:	e042      	b.n	8003dca <UART_SetConfig+0x1ba>
 8003d44:	2302      	movs	r3, #2
 8003d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d4a:	e03e      	b.n	8003dca <UART_SetConfig+0x1ba>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d52:	e03a      	b.n	8003dca <UART_SetConfig+0x1ba>
 8003d54:	2308      	movs	r3, #8
 8003d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d5a:	e036      	b.n	8003dca <UART_SetConfig+0x1ba>
 8003d5c:	2310      	movs	r3, #16
 8003d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d62:	e032      	b.n	8003dca <UART_SetConfig+0x1ba>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a6a      	ldr	r2, [pc, #424]	; (8003f14 <UART_SetConfig+0x304>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d12a      	bne.n	8003dc4 <UART_SetConfig+0x1b4>
 8003d6e:	4b6b      	ldr	r3, [pc, #428]	; (8003f1c <UART_SetConfig+0x30c>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d7c:	d01a      	beq.n	8003db4 <UART_SetConfig+0x1a4>
 8003d7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d82:	d81b      	bhi.n	8003dbc <UART_SetConfig+0x1ac>
 8003d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d88:	d00c      	beq.n	8003da4 <UART_SetConfig+0x194>
 8003d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8e:	d815      	bhi.n	8003dbc <UART_SetConfig+0x1ac>
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <UART_SetConfig+0x18c>
 8003d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d98:	d008      	beq.n	8003dac <UART_SetConfig+0x19c>
 8003d9a:	e00f      	b.n	8003dbc <UART_SetConfig+0x1ac>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003da2:	e012      	b.n	8003dca <UART_SetConfig+0x1ba>
 8003da4:	2302      	movs	r3, #2
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003daa:	e00e      	b.n	8003dca <UART_SetConfig+0x1ba>
 8003dac:	2304      	movs	r3, #4
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003db2:	e00a      	b.n	8003dca <UART_SetConfig+0x1ba>
 8003db4:	2308      	movs	r3, #8
 8003db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dba:	e006      	b.n	8003dca <UART_SetConfig+0x1ba>
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc2:	e002      	b.n	8003dca <UART_SetConfig+0x1ba>
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a51      	ldr	r2, [pc, #324]	; (8003f14 <UART_SetConfig+0x304>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d17a      	bne.n	8003eca <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d824      	bhi.n	8003e26 <UART_SetConfig+0x216>
 8003ddc:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <UART_SetConfig+0x1d4>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003e09 	.word	0x08003e09
 8003de8:	08003e27 	.word	0x08003e27
 8003dec:	08003e11 	.word	0x08003e11
 8003df0:	08003e27 	.word	0x08003e27
 8003df4:	08003e17 	.word	0x08003e17
 8003df8:	08003e27 	.word	0x08003e27
 8003dfc:	08003e27 	.word	0x08003e27
 8003e00:	08003e27 	.word	0x08003e27
 8003e04:	08003e1f 	.word	0x08003e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e08:	f7fe fbb4 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8003e0c:	61f8      	str	r0, [r7, #28]
        break;
 8003e0e:	e010      	b.n	8003e32 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e10:	4b44      	ldr	r3, [pc, #272]	; (8003f24 <UART_SetConfig+0x314>)
 8003e12:	61fb      	str	r3, [r7, #28]
        break;
 8003e14:	e00d      	b.n	8003e32 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e16:	f7fe fb15 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8003e1a:	61f8      	str	r0, [r7, #28]
        break;
 8003e1c:	e009      	b.n	8003e32 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e22:	61fb      	str	r3, [r7, #28]
        break;
 8003e24:	e005      	b.n	8003e32 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8107 	beq.w	8004048 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	4413      	add	r3, r2
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d305      	bcc.n	8003e56 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d903      	bls.n	8003e5e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e5c:	e0f4      	b.n	8004048 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	2200      	movs	r2, #0
 8003e62:	461c      	mov	r4, r3
 8003e64:	4615      	mov	r5, r2
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	022b      	lsls	r3, r5, #8
 8003e70:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e74:	0222      	lsls	r2, r4, #8
 8003e76:	68f9      	ldr	r1, [r7, #12]
 8003e78:	6849      	ldr	r1, [r1, #4]
 8003e7a:	0849      	lsrs	r1, r1, #1
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	4688      	mov	r8, r1
 8003e80:	4681      	mov	r9, r0
 8003e82:	eb12 0a08 	adds.w	sl, r2, r8
 8003e86:	eb43 0b09 	adc.w	fp, r3, r9
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	603b      	str	r3, [r7, #0]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e98:	4650      	mov	r0, sl
 8003e9a:	4659      	mov	r1, fp
 8003e9c:	f7fc fd84 	bl	80009a8 <__aeabi_uldivmod>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eae:	d308      	bcc.n	8003ec2 <UART_SetConfig+0x2b2>
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb6:	d204      	bcs.n	8003ec2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	60da      	str	r2, [r3, #12]
 8003ec0:	e0c2      	b.n	8004048 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ec8:	e0be      	b.n	8004048 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed2:	d16a      	bne.n	8003faa <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003ed4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d834      	bhi.n	8003f46 <UART_SetConfig+0x336>
 8003edc:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <UART_SetConfig+0x2d4>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003f09 	.word	0x08003f09
 8003ee8:	08003f29 	.word	0x08003f29
 8003eec:	08003f31 	.word	0x08003f31
 8003ef0:	08003f47 	.word	0x08003f47
 8003ef4:	08003f37 	.word	0x08003f37
 8003ef8:	08003f47 	.word	0x08003f47
 8003efc:	08003f47 	.word	0x08003f47
 8003f00:	08003f47 	.word	0x08003f47
 8003f04:	08003f3f 	.word	0x08003f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f08:	f7fe fb34 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8003f0c:	61f8      	str	r0, [r7, #28]
        break;
 8003f0e:	e020      	b.n	8003f52 <UART_SetConfig+0x342>
 8003f10:	efff69f3 	.word	0xefff69f3
 8003f14:	40008000 	.word	0x40008000
 8003f18:	40013800 	.word	0x40013800
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40004400 	.word	0x40004400
 8003f24:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f28:	f7fe fb3a 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 8003f2c:	61f8      	str	r0, [r7, #28]
        break;
 8003f2e:	e010      	b.n	8003f52 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f30:	4b4c      	ldr	r3, [pc, #304]	; (8004064 <UART_SetConfig+0x454>)
 8003f32:	61fb      	str	r3, [r7, #28]
        break;
 8003f34:	e00d      	b.n	8003f52 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f36:	f7fe fa85 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8003f3a:	61f8      	str	r0, [r7, #28]
        break;
 8003f3c:	e009      	b.n	8003f52 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f42:	61fb      	str	r3, [r7, #28]
        break;
 8003f44:	e005      	b.n	8003f52 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d077      	beq.n	8004048 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	005a      	lsls	r2, r3, #1
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	085b      	lsrs	r3, r3, #1
 8003f62:	441a      	add	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2b0f      	cmp	r3, #15
 8003f72:	d916      	bls.n	8003fa2 <UART_SetConfig+0x392>
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7a:	d212      	bcs.n	8003fa2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	f023 030f 	bic.w	r3, r3, #15
 8003f84:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	8afb      	ldrh	r3, [r7, #22]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	8afa      	ldrh	r2, [r7, #22]
 8003f9e:	60da      	str	r2, [r3, #12]
 8003fa0:	e052      	b.n	8004048 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fa8:	e04e      	b.n	8004048 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003faa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d827      	bhi.n	8004002 <UART_SetConfig+0x3f2>
 8003fb2:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <UART_SetConfig+0x3a8>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08003fdd 	.word	0x08003fdd
 8003fbc:	08003fe5 	.word	0x08003fe5
 8003fc0:	08003fed 	.word	0x08003fed
 8003fc4:	08004003 	.word	0x08004003
 8003fc8:	08003ff3 	.word	0x08003ff3
 8003fcc:	08004003 	.word	0x08004003
 8003fd0:	08004003 	.word	0x08004003
 8003fd4:	08004003 	.word	0x08004003
 8003fd8:	08003ffb 	.word	0x08003ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fdc:	f7fe faca 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8003fe0:	61f8      	str	r0, [r7, #28]
        break;
 8003fe2:	e014      	b.n	800400e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe4:	f7fe fadc 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 8003fe8:	61f8      	str	r0, [r7, #28]
        break;
 8003fea:	e010      	b.n	800400e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fec:	4b1d      	ldr	r3, [pc, #116]	; (8004064 <UART_SetConfig+0x454>)
 8003fee:	61fb      	str	r3, [r7, #28]
        break;
 8003ff0:	e00d      	b.n	800400e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff2:	f7fe fa27 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8003ff6:	61f8      	str	r0, [r7, #28]
        break;
 8003ff8:	e009      	b.n	800400e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ffe:	61fb      	str	r3, [r7, #28]
        break;
 8004000:	e005      	b.n	800400e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800400c:	bf00      	nop
    }

    if (pclk != 0U)
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d019      	beq.n	8004048 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	085a      	lsrs	r2, r3, #1
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	441a      	add	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	fbb2 f3f3 	udiv	r3, r2, r3
 8004026:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	2b0f      	cmp	r3, #15
 800402c:	d909      	bls.n	8004042 <UART_SetConfig+0x432>
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004034:	d205      	bcs.n	8004042 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60da      	str	r2, [r3, #12]
 8004040:	e002      	b.n	8004048 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004054:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004058:	4618      	mov	r0, r3
 800405a:	3728      	adds	r7, #40	; 0x28
 800405c:	46bd      	mov	sp, r7
 800405e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004062:	bf00      	nop
 8004064:	00f42400 	.word	0x00f42400

08004068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01a      	beq.n	800417e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004166:	d10a      	bne.n	800417e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	605a      	str	r2, [r3, #4]
  }
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041bc:	f7fd f922 	bl	8001404 <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d10e      	bne.n	80041ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f82d 	bl	800423e <UART_WaitOnFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e023      	b.n	8004236 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d10e      	bne.n	800421a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f817 	bl	800423e <UART_WaitOnFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e00d      	b.n	8004236 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2220      	movs	r2, #32
 800421e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b09c      	sub	sp, #112	; 0x70
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	4613      	mov	r3, r2
 800424c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800424e:	e0a5      	b.n	800439c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	f000 80a1 	beq.w	800439c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425a:	f7fd f8d3 	bl	8001404 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004266:	429a      	cmp	r2, r3
 8004268:	d302      	bcc.n	8004270 <UART_WaitOnFlagUntilTimeout+0x32>
 800426a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800426c:	2b00      	cmp	r3, #0
 800426e:	d13e      	bne.n	80042ee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800427e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004280:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004284:	667b      	str	r3, [r7, #100]	; 0x64
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800428e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004290:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004294:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800429c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e6      	bne.n	8004270 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3308      	adds	r3, #8
 80042a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b4:	f023 0301 	bic.w	r3, r3, #1
 80042b8:	663b      	str	r3, [r7, #96]	; 0x60
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3308      	adds	r3, #8
 80042c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80042c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1e5      	bne.n	80042a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e067      	b.n	80043be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d04f      	beq.n	800439c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800430a:	d147      	bne.n	800439c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004314:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431e:	e853 3f00 	ldrex	r3, [r3]
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800432a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004334:	637b      	str	r3, [r7, #52]	; 0x34
 8004336:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800433a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e6      	bne.n	8004316 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3308      	adds	r3, #8
 800434e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	613b      	str	r3, [r7, #16]
   return(result);
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f023 0301 	bic.w	r3, r3, #1
 800435e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3308      	adds	r3, #8
 8004366:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004368:	623a      	str	r2, [r7, #32]
 800436a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	69f9      	ldr	r1, [r7, #28]
 800436e:	6a3a      	ldr	r2, [r7, #32]
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	61bb      	str	r3, [r7, #24]
   return(result);
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e5      	bne.n	8004348 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e010      	b.n	80043be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	69da      	ldr	r2, [r3, #28]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	4013      	ands	r3, r2
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	f43f af4a 	beq.w	8004250 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3770      	adds	r7, #112	; 0x70
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 80043c8:	b5b0      	push	{r4, r5, r7, lr}
 80043ca:	b0b2      	sub	sp, #200	; 0xc8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	605a      	str	r2, [r3, #4]
 80043dc:	609a      	str	r2, [r3, #8]
 80043de:	60da      	str	r2, [r3, #12]
 80043e0:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	605a      	str	r2, [r3, #4]
 80043ec:	609a      	str	r2, [r3, #8]
 80043ee:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043f0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	605a      	str	r2, [r3, #4]
 80043fa:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80043fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	609a      	str	r2, [r3, #8]
 8004408:	60da      	str	r2, [r3, #12]
 800440a:	611a      	str	r2, [r3, #16]
 800440c:	615a      	str	r2, [r3, #20]
 800440e:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32_t ARR_Value = 0;
 8004416:	2300      	movs	r3, #0
 8004418:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    DWT_Delay_Init();
 800441c:	f000 fa10 	bl	8004840 <DWT_Delay_Init>

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOA)
 8004420:	88fb      	ldrh	r3, [r7, #6]
 8004422:	4a72      	ldr	r2, [pc, #456]	; (80045ec <SERVO_Init+0x224>)
 8004424:	015b      	lsls	r3, r3, #5
 8004426:	4413      	add	r3, r2
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800442e:	d10c      	bne.n	800444a <SERVO_Init+0x82>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004430:	4b6f      	ldr	r3, [pc, #444]	; (80045f0 <SERVO_Init+0x228>)
 8004432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004434:	4a6e      	ldr	r2, [pc, #440]	; (80045f0 <SERVO_Init+0x228>)
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800443c:	4b6c      	ldr	r3, [pc, #432]	; (80045f0 <SERVO_Init+0x228>)
 800443e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	e028      	b.n	800449c <SERVO_Init+0xd4>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOB)
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	4a67      	ldr	r2, [pc, #412]	; (80045ec <SERVO_Init+0x224>)
 800444e:	015b      	lsls	r3, r3, #5
 8004450:	4413      	add	r3, r2
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a67      	ldr	r2, [pc, #412]	; (80045f4 <SERVO_Init+0x22c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d10c      	bne.n	8004474 <SERVO_Init+0xac>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 800445a:	4b65      	ldr	r3, [pc, #404]	; (80045f0 <SERVO_Init+0x228>)
 800445c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445e:	4a64      	ldr	r2, [pc, #400]	; (80045f0 <SERVO_Init+0x228>)
 8004460:	f043 0302 	orr.w	r3, r3, #2
 8004464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004466:	4b62      	ldr	r3, [pc, #392]	; (80045f0 <SERVO_Init+0x228>)
 8004468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	623b      	str	r3, [r7, #32]
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	e013      	b.n	800449c <SERVO_Init+0xd4>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOC)
 8004474:	88fb      	ldrh	r3, [r7, #6]
 8004476:	4a5d      	ldr	r2, [pc, #372]	; (80045ec <SERVO_Init+0x224>)
 8004478:	015b      	lsls	r3, r3, #5
 800447a:	4413      	add	r3, r2
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a5e      	ldr	r2, [pc, #376]	; (80045f8 <SERVO_Init+0x230>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d10b      	bne.n	800449c <SERVO_Init+0xd4>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8004484:	4b5a      	ldr	r3, [pc, #360]	; (80045f0 <SERVO_Init+0x228>)
 8004486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004488:	4a59      	ldr	r2, [pc, #356]	; (80045f0 <SERVO_Init+0x228>)
 800448a:	f043 0304 	orr.w	r3, r3, #4
 800448e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004490:	4b57      	ldr	r3, [pc, #348]	; (80045f0 <SERVO_Init+0x228>)
 8004492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	61fb      	str	r3, [r7, #28]
 800449a:	69fb      	ldr	r3, [r7, #28]
    }

	GPIO_InitStruct.Pin = SERVO_CfgParam[au16_SERVO_Instance].SERVO_PIN;
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	4a53      	ldr	r2, [pc, #332]	; (80045ec <SERVO_Init+0x224>)
 80044a0:	015b      	lsls	r3, r3, #5
 80044a2:	4413      	add	r3, r2
 80044a4:	3304      	adds	r3, #4
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ac:	2302      	movs	r3, #2
 80044ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b2:	2300      	movs	r3, #0
 80044b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	4a4c      	ldr	r2, [pc, #304]	; (80045ec <SERVO_Init+0x224>)
 80044bc:	015b      	lsls	r3, r3, #5
 80044be:	4413      	add	r3, r2
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80044c6:	4611      	mov	r1, r2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fd f8b1 	bl	8001630 <HAL_GPIO_Init>

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	4a46      	ldr	r2, [pc, #280]	; (80045ec <SERVO_Init+0x224>)
 80044d2:	015b      	lsls	r3, r3, #5
 80044d4:	4413      	add	r3, r2
 80044d6:	3314      	adds	r3, #20
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fb ffb8 	bl	8000450 <__aeabi_ui2d>
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	4b45      	ldr	r3, [pc, #276]	; (80045fc <SERVO_Init+0x234>)
 80044e6:	f7fc f957 	bl	8000798 <__aeabi_ddiv>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4610      	mov	r0, r2
 80044f0:	4619      	mov	r1, r3
 80044f2:	f7fc fa39 	bl	8000968 <__aeabi_d2uiz>
 80044f6:	4603      	mov	r3, r0
 80044f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 80044fc:	88fb      	ldrh	r3, [r7, #6]
 80044fe:	4a3b      	ldr	r2, [pc, #236]	; (80045ec <SERVO_Init+0x224>)
 8004500:	015b      	lsls	r3, r3, #5
 8004502:	4413      	add	r3, r2
 8004504:	3314      	adds	r3, #20
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f7fb ffa1 	bl	8000450 <__aeabi_ui2d>
 800450e:	4604      	mov	r4, r0
 8004510:	460d      	mov	r5, r1
 8004512:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8004516:	f7fb ff9b 	bl	8000450 <__aeabi_ui2d>
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	4b38      	ldr	r3, [pc, #224]	; (8004600 <SERVO_Init+0x238>)
 8004520:	f7fb fe5a 	bl	80001d8 <__adddf3>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4610      	mov	r0, r2
 800452a:	4619      	mov	r1, r3
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	4b34      	ldr	r3, [pc, #208]	; (8004604 <SERVO_Init+0x23c>)
 8004532:	f7fc f807 	bl	8000544 <__aeabi_dmul>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	4620      	mov	r0, r4
 800453c:	4629      	mov	r1, r5
 800453e:	f7fc f92b 	bl	8000798 <__aeabi_ddiv>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4610      	mov	r0, r2
 8004548:	4619      	mov	r1, r3
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <SERVO_Init+0x238>)
 8004550:	f7fb fe40 	bl	80001d4 <__aeabi_dsub>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4610      	mov	r0, r2
 800455a:	4619      	mov	r1, r3
 800455c:	f7fc fa04 	bl	8000968 <__aeabi_d2uiz>
 8004560:	4603      	mov	r3, r0
 8004562:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM1)
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	4a20      	ldr	r2, [pc, #128]	; (80045ec <SERVO_Init+0x224>)
 800456a:	015b      	lsls	r3, r3, #5
 800456c:	4413      	add	r3, r2
 800456e:	3308      	adds	r3, #8
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a25      	ldr	r2, [pc, #148]	; (8004608 <SERVO_Init+0x240>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d10c      	bne.n	8004592 <SERVO_Init+0x1ca>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 8004578:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <SERVO_Init+0x228>)
 800457a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457c:	4a1c      	ldr	r2, [pc, #112]	; (80045f0 <SERVO_Init+0x228>)
 800457e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004582:	6613      	str	r3, [r2, #96]	; 0x60
 8004584:	4b1a      	ldr	r3, [pc, #104]	; (80045f0 <SERVO_Init+0x228>)
 8004586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	e051      	b.n	8004636 <SERVO_Init+0x26e>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8004592:	88fb      	ldrh	r3, [r7, #6]
 8004594:	4a15      	ldr	r2, [pc, #84]	; (80045ec <SERVO_Init+0x224>)
 8004596:	015b      	lsls	r3, r3, #5
 8004598:	4413      	add	r3, r2
 800459a:	3308      	adds	r3, #8
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a2:	d10c      	bne.n	80045be <SERVO_Init+0x1f6>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 80045a4:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <SERVO_Init+0x228>)
 80045a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a8:	4a11      	ldr	r2, [pc, #68]	; (80045f0 <SERVO_Init+0x228>)
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	6593      	str	r3, [r2, #88]	; 0x58
 80045b0:	4b0f      	ldr	r3, [pc, #60]	; (80045f0 <SERVO_Init+0x228>)
 80045b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	e03b      	b.n	8004636 <SERVO_Init+0x26e>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM1)
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	4a0a      	ldr	r2, [pc, #40]	; (80045ec <SERVO_Init+0x224>)
 80045c2:	015b      	lsls	r3, r3, #5
 80045c4:	4413      	add	r3, r2
 80045c6:	3308      	adds	r3, #8
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a0f      	ldr	r2, [pc, #60]	; (8004608 <SERVO_Init+0x240>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d11d      	bne.n	800460c <SERVO_Init+0x244>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 80045d0:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <SERVO_Init+0x228>)
 80045d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d4:	4a06      	ldr	r2, [pc, #24]	; (80045f0 <SERVO_Init+0x228>)
 80045d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045da:	6613      	str	r3, [r2, #96]	; 0x60
 80045dc:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <SERVO_Init+0x228>)
 80045de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	e025      	b.n	8004636 <SERVO_Init+0x26e>
 80045ea:	bf00      	nop
 80045ec:	08004958 	.word	0x08004958
 80045f0:	40021000 	.word	0x40021000
 80045f4:	48000400 	.word	0x48000400
 80045f8:	48000800 	.word	0x48000800
 80045fc:	41490000 	.word	0x41490000
 8004600:	3ff00000 	.word	0x3ff00000
 8004604:	40490000 	.word	0x40490000
 8004608:	40012c00 	.word	0x40012c00
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM1)
 800460c:	88fb      	ldrh	r3, [r7, #6]
 800460e:	4a5f      	ldr	r2, [pc, #380]	; (800478c <SERVO_Init+0x3c4>)
 8004610:	015b      	lsls	r3, r3, #5
 8004612:	4413      	add	r3, r2
 8004614:	3308      	adds	r3, #8
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a5d      	ldr	r2, [pc, #372]	; (8004790 <SERVO_Init+0x3c8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d10b      	bne.n	8004636 <SERVO_Init+0x26e>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 800461e:	4b5d      	ldr	r3, [pc, #372]	; (8004794 <SERVO_Init+0x3cc>)
 8004620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004622:	4a5c      	ldr	r2, [pc, #368]	; (8004794 <SERVO_Init+0x3cc>)
 8004624:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004628:	6613      	str	r3, [r2, #96]	; 0x60
 800462a:	4b5a      	ldr	r3, [pc, #360]	; (8004794 <SERVO_Init+0x3cc>)
 800462c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800462e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8004636:	88fb      	ldrh	r3, [r7, #6]
 8004638:	4a54      	ldr	r2, [pc, #336]	; (800478c <SERVO_Init+0x3c4>)
 800463a:	015b      	lsls	r3, r3, #5
 800463c:	4413      	add	r3, r2
 800463e:	3308      	adds	r3, #8
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.Prescaler = PSC_Value;
 8004644:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004648:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800464a:	2300      	movs	r3, #0
 800464c:	633b      	str	r3, [r7, #48]	; 0x30
	htim.Init.Period = ARR_Value;
 800464e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004652:	637b      	str	r3, [r7, #52]	; 0x34
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004654:	2300      	movs	r3, #0
 8004656:	63bb      	str	r3, [r7, #56]	; 0x38
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004658:	2380      	movs	r3, #128	; 0x80
 800465a:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_TIM_Base_Init(&htim);
 800465c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004660:	4618      	mov	r0, r3
 8004662:	f7fe fb0b 	bl	8002c7c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800466a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800466e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8004672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004676:	4611      	mov	r1, r2
 8004678:	4618      	mov	r0, r3
 800467a:	f7fe fda9 	bl	80031d0 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800467e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004682:	4618      	mov	r0, r3
 8004684:	f7fe fb51 	bl	8002d2a <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004688:	2300      	movs	r3, #0
 800468a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800468e:	2300      	movs	r3, #0
 8004690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8004694:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8004698:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800469c:	4611      	mov	r1, r2
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff fa02 	bl	8003aa8 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046a4:	2360      	movs	r3, #96	; 0x60
 80046a6:	677b      	str	r3, [r7, #116]	; 0x74
	sConfigOC.Pulse = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	67bb      	str	r3, [r7, #120]	; 0x78
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046ac:	2300      	movs	r3, #0
 80046ae:	67fb      	str	r3, [r7, #124]	; 0x7c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046b0:	2300      	movs	r3, #0
 80046b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	4a34      	ldr	r2, [pc, #208]	; (800478c <SERVO_Init+0x3c4>)
 80046ba:	015b      	lsls	r3, r3, #5
 80046bc:	4413      	add	r3, r2
 80046be:	3310      	adds	r3, #16
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80046c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe fc6c 	bl	8002fa8 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 80046d0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80046d4:	f7fb febc 	bl	8000450 <__aeabi_ui2d>
 80046d8:	4604      	mov	r4, r0
 80046da:	460d      	mov	r5, r1
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	4a2b      	ldr	r2, [pc, #172]	; (800478c <SERVO_Init+0x3c4>)
 80046e0:	015b      	lsls	r3, r3, #5
 80046e2:	4413      	add	r3, r2
 80046e4:	3318      	adds	r3, #24
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fb fed3 	bl	8000494 <__aeabi_f2d>
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	4b29      	ldr	r3, [pc, #164]	; (8004798 <SERVO_Init+0x3d0>)
 80046f4:	f7fc f850 	bl	8000798 <__aeabi_ddiv>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4620      	mov	r0, r4
 80046fe:	4629      	mov	r1, r5
 8004700:	f7fb ff20 	bl	8000544 <__aeabi_dmul>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	88fc      	ldrh	r4, [r7, #6]
 800470a:	4610      	mov	r0, r2
 800470c:	4619      	mov	r1, r3
 800470e:	f7fc f92b 	bl	8000968 <__aeabi_d2uiz>
 8004712:	4603      	mov	r3, r0
 8004714:	b29a      	uxth	r2, r3
 8004716:	4b21      	ldr	r3, [pc, #132]	; (800479c <SERVO_Init+0x3d4>)
 8004718:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 800471c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8004720:	f7fb fe96 	bl	8000450 <__aeabi_ui2d>
 8004724:	4604      	mov	r4, r0
 8004726:	460d      	mov	r5, r1
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	4a18      	ldr	r2, [pc, #96]	; (800478c <SERVO_Init+0x3c4>)
 800472c:	015b      	lsls	r3, r3, #5
 800472e:	4413      	add	r3, r2
 8004730:	331c      	adds	r3, #28
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f7fb fead 	bl	8000494 <__aeabi_f2d>
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	4b16      	ldr	r3, [pc, #88]	; (8004798 <SERVO_Init+0x3d0>)
 8004740:	f7fc f82a 	bl	8000798 <__aeabi_ddiv>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4620      	mov	r0, r4
 800474a:	4629      	mov	r1, r5
 800474c:	f7fb fefa 	bl	8000544 <__aeabi_dmul>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	88fc      	ldrh	r4, [r7, #6]
 8004756:	4610      	mov	r0, r2
 8004758:	4619      	mov	r1, r3
 800475a:	f7fc f905 	bl	8000968 <__aeabi_d2uiz>
 800475e:	4603      	mov	r3, r0
 8004760:	b299      	uxth	r1, r3
 8004762:	4a0e      	ldr	r2, [pc, #56]	; (800479c <SERVO_Init+0x3d4>)
 8004764:	00a3      	lsls	r3, r4, #2
 8004766:	4413      	add	r3, r2
 8004768:	460a      	mov	r2, r1
 800476a:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	4a07      	ldr	r2, [pc, #28]	; (800478c <SERVO_Init+0x3c4>)
 8004770:	015b      	lsls	r3, r3, #5
 8004772:	4413      	add	r3, r2
 8004774:	3310      	adds	r3, #16
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800477c:	4611      	mov	r1, r2
 800477e:	4618      	mov	r0, r3
 8004780:	f7fe fb34 	bl	8002dec <HAL_TIM_PWM_Start>
}
 8004784:	bf00      	nop
 8004786:	37c8      	adds	r7, #200	; 0xc8
 8004788:	46bd      	mov	sp, r7
 800478a:	bdb0      	pop	{r4, r5, r7, pc}
 800478c:	08004958 	.word	0x08004958
 8004790:	40012c00 	.word	0x40012c00
 8004794:	40021000 	.word	0x40021000
 8004798:	40340000 	.word	0x40340000
 800479c:	20000148 	.word	0x20000148

080047a0 <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(uint16_t au16_SERVO_Instance, float af_Angle)
{
 80047a0:	b5b0      	push	{r4, r5, r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	ed87 0a00 	vstr	s0, [r7]
 80047ac:	80fb      	strh	r3, [r7, #6]
	uint16_t au16_Pulse = 0;
 80047ae:	2300      	movs	r3, #0
 80047b0:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 80047b2:	88fb      	ldrh	r3, [r7, #6]
 80047b4:	4a1f      	ldr	r2, [pc, #124]	; (8004834 <SERVO_MoveTo+0x94>)
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	885b      	ldrh	r3, [r3, #2]
 80047bc:	4619      	mov	r1, r3
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	4a1c      	ldr	r2, [pc, #112]	; (8004834 <SERVO_MoveTo+0x94>)
 80047c2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80047c6:	1acb      	subs	r3, r1, r3
 80047c8:	ee07 3a90 	vmov	s15, r3
 80047cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047d0:	edd7 7a00 	vldr	s15, [r7]
 80047d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d8:	ee17 0a90 	vmov	r0, s15
 80047dc:	f7fb fe5a 	bl	8000494 <__aeabi_f2d>
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	4b14      	ldr	r3, [pc, #80]	; (8004838 <SERVO_MoveTo+0x98>)
 80047e6:	f7fb ffd7 	bl	8000798 <__aeabi_ddiv>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4614      	mov	r4, r2
 80047f0:	461d      	mov	r5, r3
			+ gs_SERVO_info[au16_SERVO_Instance].Period_Min;
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	4a0f      	ldr	r2, [pc, #60]	; (8004834 <SERVO_MoveTo+0x94>)
 80047f6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fb fe38 	bl	8000470 <__aeabi_i2d>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4620      	mov	r0, r4
 8004806:	4629      	mov	r1, r5
 8004808:	f7fb fce6 	bl	80001d8 <__adddf3>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 8004810:	4610      	mov	r0, r2
 8004812:	4619      	mov	r1, r3
 8004814:	f7fc f8a8 	bl	8000968 <__aeabi_d2uiz>
 8004818:	4603      	mov	r3, r0
 800481a:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 800481c:	88fb      	ldrh	r3, [r7, #6]
 800481e:	4a07      	ldr	r2, [pc, #28]	; (800483c <SERVO_MoveTo+0x9c>)
 8004820:	015b      	lsls	r3, r3, #5
 8004822:	4413      	add	r3, r2
 8004824:	330c      	adds	r3, #12
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	89fa      	ldrh	r2, [r7, #14]
 800482a:	601a      	str	r2, [r3, #0]
}
 800482c:	bf00      	nop
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bdb0      	pop	{r4, r5, r7, pc}
 8004834:	20000148 	.word	0x20000148
 8004838:	40668000 	.word	0x40668000
 800483c:	08004958 	.word	0x08004958

08004840 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8004844:	4b14      	ldr	r3, [pc, #80]	; (8004898 <DWT_Delay_Init+0x58>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	4a13      	ldr	r2, [pc, #76]	; (8004898 <DWT_Delay_Init+0x58>)
 800484a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800484e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8004850:	4b11      	ldr	r3, [pc, #68]	; (8004898 <DWT_Delay_Init+0x58>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a10      	ldr	r2, [pc, #64]	; (8004898 <DWT_Delay_Init+0x58>)
 8004856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800485a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800485c:	4b0f      	ldr	r3, [pc, #60]	; (800489c <DWT_Delay_Init+0x5c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a0e      	ldr	r2, [pc, #56]	; (800489c <DWT_Delay_Init+0x5c>)
 8004862:	f023 0301 	bic.w	r3, r3, #1
 8004866:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8004868:	4b0c      	ldr	r3, [pc, #48]	; (800489c <DWT_Delay_Init+0x5c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a0b      	ldr	r2, [pc, #44]	; (800489c <DWT_Delay_Init+0x5c>)
 800486e:	f043 0301 	orr.w	r3, r3, #1
 8004872:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8004874:	4b09      	ldr	r3, [pc, #36]	; (800489c <DWT_Delay_Init+0x5c>)
 8004876:	2200      	movs	r2, #0
 8004878:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800487a:	bf00      	nop
    __ASM volatile ("NOP");
 800487c:	bf00      	nop
    __ASM volatile ("NOP");
 800487e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8004880:	4b06      	ldr	r3, [pc, #24]	; (800489c <DWT_Delay_Init+0x5c>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8004888:	2300      	movs	r3, #0
 800488a:	e000      	b.n	800488e <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 800488c:	2301      	movs	r3, #1
    }
}
 800488e:	4618      	mov	r0, r3
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	e000edf0 	.word	0xe000edf0
 800489c:	e0001000 	.word	0xe0001000

080048a0 <__libc_init_array>:
 80048a0:	b570      	push	{r4, r5, r6, lr}
 80048a2:	4d0d      	ldr	r5, [pc, #52]	; (80048d8 <__libc_init_array+0x38>)
 80048a4:	4c0d      	ldr	r4, [pc, #52]	; (80048dc <__libc_init_array+0x3c>)
 80048a6:	1b64      	subs	r4, r4, r5
 80048a8:	10a4      	asrs	r4, r4, #2
 80048aa:	2600      	movs	r6, #0
 80048ac:	42a6      	cmp	r6, r4
 80048ae:	d109      	bne.n	80048c4 <__libc_init_array+0x24>
 80048b0:	4d0b      	ldr	r5, [pc, #44]	; (80048e0 <__libc_init_array+0x40>)
 80048b2:	4c0c      	ldr	r4, [pc, #48]	; (80048e4 <__libc_init_array+0x44>)
 80048b4:	f000 f820 	bl	80048f8 <_init>
 80048b8:	1b64      	subs	r4, r4, r5
 80048ba:	10a4      	asrs	r4, r4, #2
 80048bc:	2600      	movs	r6, #0
 80048be:	42a6      	cmp	r6, r4
 80048c0:	d105      	bne.n	80048ce <__libc_init_array+0x2e>
 80048c2:	bd70      	pop	{r4, r5, r6, pc}
 80048c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c8:	4798      	blx	r3
 80048ca:	3601      	adds	r6, #1
 80048cc:	e7ee      	b.n	80048ac <__libc_init_array+0xc>
 80048ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d2:	4798      	blx	r3
 80048d4:	3601      	adds	r6, #1
 80048d6:	e7f2      	b.n	80048be <__libc_init_array+0x1e>
 80048d8:	08004980 	.word	0x08004980
 80048dc:	08004980 	.word	0x08004980
 80048e0:	08004980 	.word	0x08004980
 80048e4:	08004984 	.word	0x08004984

080048e8 <memset>:
 80048e8:	4402      	add	r2, r0
 80048ea:	4603      	mov	r3, r0
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d100      	bne.n	80048f2 <memset+0xa>
 80048f0:	4770      	bx	lr
 80048f2:	f803 1b01 	strb.w	r1, [r3], #1
 80048f6:	e7f9      	b.n	80048ec <memset+0x4>

080048f8 <_init>:
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fa:	bf00      	nop
 80048fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fe:	bc08      	pop	{r3}
 8004900:	469e      	mov	lr, r3
 8004902:	4770      	bx	lr

08004904 <_fini>:
 8004904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004906:	bf00      	nop
 8004908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490a:	bc08      	pop	{r3}
 800490c:	469e      	mov	lr, r3
 800490e:	4770      	bx	lr
